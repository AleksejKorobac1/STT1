00:00:01 the following is a conversation with David Patterson Turing Award winner and professor of computer science at
00:00:08 Berkeley he's known for pioneering contributions to RISC processor architecture used by 99% of new chips
00:00:17 today and for co-creating RAID storage the impact that these two lines of research and development have had in our
00:00:25 world is immeasurable he's also one of the great educators of computer science in the world his book with John Hennessy
00:00:31 is how I first learned about and was humbled by the inner workings of machines at the lowest level quick
00:00:38 summary of the ads to sponsors the Jordan Harbinger show and cash app please consider supporting the podcast
00:00:46 by going to Jordan Harbinger complex and downloading cash app and using code Lexx podcast click on the links buy the
00:00:55 stuff it's the best way to support this podcast and in general the journey I'm on in my research and startup this is
00:01:01 the artificial intelligence podcast if you enjoy it subscribe on YouTube review it five
00:01:06 stars in hype a podcast supported on patreon or connect with me on Twitter and Lex Friedman spelled without the e
00:01:16 just Fri DM a.m. as usual I'll do a few minutes of ads now and never any ads in the middle that can break the flow of
00:01:20 the conversation this episode is supported by the Jordan Harbinger show go to Jordan Harbinger
00:01:27 calm / Lex it's how he knows I set you on that page there's links to subscribe to it an
00:01:33 apple podcast Spotify and everywhere else I've been binging on this podcast it's amazing Jordan is a great human
00:01:40 being he gets the best out of his guests - deep calls him out when it's needed it makes the whole thing fun to listen to
00:01:48 he's interviewed Kobe Bryant Mark Cuban and Neil deGrasse Tyson and Garry Kasparov and many more I recently
00:01:54 listened to his conversation with Frank Abagnale author of catch me if you can one of the world's most famous Kahneman
00:02:02 perfect podcast length and topic for a recent long distance run that I did go to Jordan Harbinger complex to give
00:02:13 him my love and to support this podcast subscribe also on Apple podcast Spotify and everywhere else this show is
00:02:21 presented by cash app the greatest sponsor of this podcast ever and the number one finance app in the App Store
00:02:28 when you get a used coat Lex podcast cash app lets you send money to friends buy bitcoin invest in the stock market
00:02:35 with as little as one dollar since gas rep allows you to buy bitcoin let me mention that cryptocurrency in the
00:02:40 context of the history of money is fascinating I recommend the scent of money as a great book on this history
00:02:48 also the audio book is amazing debits and credits on Ledger's started around 30,000 years ago the US dollar created
00:02:54 over two hundred years ago and the first decentralized cryptocurrency released just over ten years ago so given that
00:03:01 history cryptocurrencies still very much in its early days of development but it's still aiming to and just might
00:03:08 redefine the nature of money so again if you get cash out from the App Store Google Play and use the code Lex podcast
00:03:15 you get ten dollars and cash up will also donate ten dollars to first an organization that is helping to advance
00:03:22 robotics to stem education for young people around the world and now here's my conversation with David Patterson
00:03:30 let's start with the big historical question how have computers changed in the past 50 years at both the
00:03:36 fundamental architectural level and in general in your eyes well the biggest thing that happened was the invention of
00:03:44 the microprocessor so computers that used to fill up several rooms could fit inside your cell phone and not only and
00:03:53 how do they get smaller they got a lot faster so they're million times faster than they were 50 years ago and they're
00:04:02 much cheaper and they're RIBA covetous you know there's seven point eight billion people on this planet probably
00:04:09 half of them have cell phones but you know just remarkable it's probably more micro processors than
00:04:16 there are people sure I don't know what the ratio is but I'm sure it's above one maybe it's ten to one or some number
00:04:25 like that what is a microprocessor so a way to say what a microprocessor is to tell you what's inside a computer so a
00:04:32 computer forever has classically had five pieces there's input and output which kind of naturally as you'd expect
00:04:40 is input is like speech or typing and output is displays there's a memory and like the name sounds it it remembers
00:04:52 things so it's integrated circuits whose job is you put information in and when you ask for it it comes back out that's
00:04:58 memory and the third part is the processor where the team microprocessor comes from and that has two pieces as
00:05:06 well and that is the control which is kind of the brain of the processor and the what's called the arithmetic unit
00:05:15 it's kind of the Brawn of the computer so if you think of the as a human body the arithmetic unit the thing that does
00:05:21 the number crunching is the is the body and the control is the brain so those five pieces input/output memory
00:05:30 arithmetic unit and control are have been in computers since the very dawn in the last two are considered the
00:05:37 processor so a microprocessor simply means a process of the fits on a microchip and that was invented at about
00:05:44 you know 40 years ago was the first microprocessor it's interesting that you refer to the arithmetic unit as the like
00:05:52 he connected to the body and the controller's of the brain so I guess I never thought of it that was a nice way
00:05:58 to think of it because most of the actions the microprocessor does in terms of literally sort of computation with
00:06:07 the microprocessor does computation it processes information and most of the thing it does is basically earth net
00:06:15 arithmetic operations what what are the operations by the way it's a lot like a calculator you know so there are add
00:06:22 instructions a subtractive Stressless multiply and divide and kind of the brilliance of the invention
00:06:32 of the my computer or the processor is that it performs very trivial operations but it just performs billions of them
00:06:40 per second and what we're capable of doing is writing software that can take these very trivial instructions and have
00:06:47 them create tasks that can do things better than human beings can do today just looking back through your career
00:06:54 did you anticipate the kind of how good we would be able to get at doing these small basic operations I think what how
00:07:03 many surprises along the way we just kind of set back and said wow I didn't expect it to go this fast this good well
00:07:12 the the fundamental driving force is what scored Moore's law which was named after Gordon Moore who's a Berkeley
00:07:21 alumnus and he made this observation very early in what are called semi conductors and semiconductors are these
00:07:28 ideas you can build these very simple switches and you can put them on these microchips and he made his observation
00:07:35 over 50 years ago he looked at a few years and said I think what's going to happen is the number of these little
00:07:41 switches called transistors is going to double every year for the next decade and he said this in 1965 and in 1975 he
00:07:49 said well maybe he's gonna double every two years and that I would other people since named that Moore's Law guided the
00:07:58 industry and when Gordon Moore makes that prediction he he wrote a paper back in I think in the in the 70s and said
00:08:09 not only did this going to happen he wrote what would be the implications of that and in this article from 1965 he he
00:08:17 shows ideas like computers being in cars and computers being in something that you would buy in the grocery store and
00:08:24 stuff like that so he kind of not only called his shot he called the implications of it so if you were in in
00:08:31 the computing field and a few believed Moore's prediction he kind of said what the what would be happening in the future
00:08:39 so so it's not kind of it's at one sense this is what was predicted and you could imagine it was
00:08:46 easily believed that Moore's law was going to continue and so this would be the implications on the other side there
00:08:53 are these shocking events in your life like I remember driving in meriem across the bay in San Francisco and seeing a
00:09:03 bulletin board at a local Civic Center and had a URL on it  and it was like if for all for all that's for the people
00:09:10 at the time these first URLs and that's the you know ww select stuff with the HTTP people thought it was looks like
00:09:21 alien alien writing right they'd see these advertisements and commercials or bulletin boards that had this alien
00:09:26 writing on it so for the lay people is like what the hell is going on here and for those people interesting it's oh my
00:09:33 god this stuff is getting so popular it's actually leaking out of our nerdy world and into the real world so that I
00:09:39 mean there is events like that I think another one was I member with the in the early days of the personal computer when
00:09:45 we started seeing advertisements in magazines for personal computers like it's so popular that it's it made the
00:09:52 newspapers so at one hands you know Gordon Moore predicted it and you kind of expected it to happen but when it
00:09:57 really hit and you saw it affecting society it was it was shocking so maybe taking a step back and looking both the
00:10:07 engineering and philosophical perspective what what do you see as the layers of abstraction in the computer do
00:10:15 you see a computer as a set of layers of abstractions yeah and I think that's one of the things that computer science
00:10:23 fundamentals is the these things are really complicated in the way we cope with complicated software and
00:10:28 complicated hardware is these layers of abstraction and that simply means that we you know suspend disbelief and
00:10:38 pretend that the only thing you know is that layer and you don't know anything about the layer below it and that's the
00:10:44 way we can make very complicated things and probably it started with hardware that's the way it was done but it's been
00:10:52 proven extremely useful and you know I would think in a modern computer today there might be 10 or 20
00:10:59 layers of abstraction and they're all trying to kind of enforce this contract is all you know is this interface
00:11:08 there's a set of commands that you can allow to use and you stick to those commands that we will faithfully execute
00:11:14 that and it's like peeling the air layers of a London onion you get down there's a new set of layers and so forth
00:11:22 so for people who want to study computer science the exciting part about it is you can keep peeling those layers you
00:11:30 you take your first course and you might learn to program in Python and then you can take a follow-on course and you can
00:11:36 get it down to a lower level language like C and you know you can go and you can if you want to you can start getting
00:11:43 into the hardware layers and you keep getting down all the way to that transistor that I talked about that
00:11:49 Gordon Moore predicted and you can understand all those layers all the way up to the highest level application
00:11:59 software so it's it's a very kind of magnetic field if you're interested you can go into any depth and keep going in
00:12:07 particular what's happening right now or it's happened in software last twenty years and recently in hardware there's
00:12:13 getting to be open sourced versions of all of these things so what open source means is what the engineer the
00:12:22 programmer designs it's not secret the belonging to a company it's up there on the World Wide Web so you can see it so
00:12:31 you can look at for lots of pieces of software that you use you can see exactly what the programmer does if you
00:12:38 want to get involved that used to stop at the hardware recently there's been an efforts to make open-source hardware and
00:12:46 those interfaces open so you can see that so instead of before you had to stop at the hardware you can now start
00:12:52 going layer by layer below that and see what's inside there so it's it's a remarkable time that for the interested
00:12:59 individual can really see in great depth what's really going on and the computers that power everything that we see around
00:13:06 us are you thinking also when you say open source at the hardware level is this going to the design
00:13:14 architecture instruction set level or is it going to literally the the you know the manufacturer of the of the actual
00:13:24 hardware of the actual chips whether that's a six specialized a particular domain or the general yeah so let's talk
00:13:31 about that a little bit so when you get down to the bottom layer of software the way software talks to hardware is in a
00:13:41 vocabulary and what we call that vocabulary we call that the words of that vocabulary called instructions in
00:13:50 the technical term for the vocabulary is instruction set so those instructions are likely we
00:13:54 talked about earlier that can be instructions like add subtract and multiply divide there's instructions to
00:14:02 put data into memory which is called a store instruction and to get data back which is called the load instructions
00:14:08 and those simple instructions go back to the very dawn of computing in you know in 1950 the commercial commercial
00:14:14 computer had these instructions so that's the instruction set that we're talking about so up until I'd say ten
00:14:21 years ago these instruction sets are all proprietary so a very popular one is Alden by Intel the one that's in the
00:14:30 cloud and then all the pcs in the world the Intel owns that instruction set it's referred to as the x86 there have been a
00:14:38 sequence of ones that the first number was called 8086 and since then there's been a lot of
00:14:43 numbers but they all end in 86 so there's then that kind of family of instruction sets and that's proprietary
00:14:51 and that's proprietary the other one that's very popular is from arm that kind of powers all of all the cell
00:14:58 phones in the world all the iPads in the world and a lot of things that are so-called Internet of Things devices arm
00:15:08 and that one is also proprietary arm will license it to people for a fee but they own that so the new idea that got
00:15:15 started at Berkeley kind of unintentionally ten years ago is in early in my career we pioneered a way
00:15:25 to do of these vocabularies instruction sets that was very controversial at the time at the time in the 1980s
00:15:32 conventional wisdom was these vocabularies instruction sets should have you know powerful instructions so
00:15:39 polysyllabic kind of words you can think of that and and so that instead of just add subtract and multiply they would
00:15:47 have polynomial vied or sort a list and the hope was of those powerful vocabularies that make it easier for
00:15:56 software so we thought that didn't make sense for microprocessors servers people at Berkeley and Stanford and IBM who
00:16:02 argued the opposite and we what we called that was a reduced instruction set computer in the abbreviation was our
00:16:11 ISC and typical for computer people we use the abbreviations start pronouncing it so risk was there so we said for
00:16:17 microprocessors which with Gordon's Moore is changing really fast we think it's better to have a pretty simple set
00:16:25 of instructions reduce set of instructions that that would be a better way to build microprocessors since
00:16:31 they're going to be changing so fast due to Moore's law and then we'll just use standard software to cover the used
00:16:40 generate more of those simple instructions and one of the pieces of software that it's in a software stack
00:16:46 going between these layers of abstractions is called a compiler and it basically translates it's a translator
00:16:52 between levels we said the translator will handle it so the technical question was well since there are these reduced
00:17:00 instructions you have to execute more of them yeah that's right but maybe they execute them faster yeah that's right
00:17:06 there's simpler so they could go faster but you have to do more of them so what's what's that trade-off look like
00:17:12 and it ended up that we ended up executing maybe 50 percent more instructions maybe 1/3 more instructions
00:17:20 but they ran four times faster so so this risk controversial risk ideas proved to be maybe factors of three or
00:17:28 four better I love that this idea was controversial and most kind of like a rebellious so that's
00:17:35 in the context of what was more conventional is the complex instruction set competing so how'd you pronounce
00:17:44 that Sisk Sisk risk vs. Sisk and and believe it or not this sounds very very you know who cares about this right it
00:17:54 was it was violently debated at several conferences it's like what's the brightman ago is is and people thought
00:18:00 risk was you know was de-evolution we're gonna make software worse by making death instructions simpler and they're
00:18:07 fierce debates at several conferences in the 1980s and then later in the eighties that kind of settled to these benefits
00:18:16 it's not completely intuitive to me why risk has for the most part one yes so why do that happen yeah yeah and maybe I
00:18:23 can sort of say a bunch of dumb things that could lay the land for further commentary so to me and this is a this
00:18:31 is kind of interesting thing if you look at C++ was just see with modern compilers you really could write faster
00:18:40 code with C++ so relying on the compiler to reduce your complicated code into something simple and fast so to me
00:18:49 comparing risk maybe this is a dumb question but why is it that focusing the definition the design of the instruction
00:18:59 set on very few simple instructions in the long run provide faster execution versus coming up with like I said a ton
00:19:10 of complicated instructions then over time you know years maybe decades you come up with compilers that can reduce
00:19:18 those into simple instructions for you yeah some let's try and split that into two pieces so if the compiler can do
00:19:27 that for you if the pilot can take you know a complicated program and produce simpler instructions then the programmer
00:19:36 doesn't care right programmer yeah yeah I don't care just how how fast is the computer I'm using how much does it cost
00:19:43 and so what we what and kind of in the software industry is right around before the 1980s critical
00:19:51 pieces of software we're still written not in languages like C or C++ they were written in what's called assembly
00:19:59 language where there's this kind of humans writing exactly at the instructions at the level then that a
00:20:06 computer can understand so they were writing add subtract multiply you know instructions it's very tedious but the
00:20:14 belief was to write this lowest level of software that the people use which are called operating systems they had to be
00:20:21 written in assembly language because these high-level languages were just too inefficient they were too slow or the
00:20:29 the programs would be too big so that changed with a famous operating system called UNIX which is kind of the
00:20:37 grandfather of all the operating systems today so the UNIX demonstrated that you could write something as complicated as
00:20:45 an operating system in a language like C so once that was true then that meant we could hide the instruction set from the
00:20:55 programmer and so that meant then it didn't really matter the programmer didn't have to write lots of these
00:21:01 simple instructions so that was up to the compiler so that was part of our arguments for risk is if you were still
00:21:06 writing assembly languages maybe a better case for sis constructions but if the compiler can do that it's gonna be
00:21:14 you know that's done once the computer translates it once and then every time you run the program it runs that this
00:21:20 this potentially simpler instructions and so that that was the debate right is because and people would acknowledge
00:21:29 that these simpler instructions could lead to a faster computer you can think of mono syllabic constructions you could
00:21:34 say them you know if you think of reading you probably read them faster or say them faster than long instructions
00:21:40 the same thing that analogy works pretty well for hardware and as long as you didn't have to read a lot more of those
00:21:47 instructions you could win so that's that's kind of that's the basic idea for risk but it's interesting that the in
00:21:54 that discussion of UNIX to see that there's only one step of levels of abstraction from the code
00:22:02 that's really the closest to the machine to the code that's written by human it's  at least to me again perhaps a dumb
00:22:11 intuition but it feels like there might have been more layers sort of different kinds of humans stacked as well of each
00:22:19 other so what's true and not true about what you said is several of the layers of software like so the if you hear two
00:22:31 layers would be suppose we just talked about two layers that would be the operating system like you get from from
00:22:39 Microsoft or from Apple like iOS or the Windows operating system and let's say applications that run on top of it like
00:22:48 Word or Excel so both the operating system could be written in C and the application could be written in C so but
00:22:56 you could construct those two layers and the applications absolutely do call upon the operating system and the change was
00:23:03 that both of them could be written in higher-level languages so it's one step of a translation but you can still build
00:23:10 many layers of abstraction of software on top of that and that's how how things are done today so still today many of
00:23:20 the layers that you'll you'll deep deal with you may deal with debuggers you may deal with linkers there's libraries many
00:23:30 of those today will be written in c++ say even though that language is pretty ancient and even the Python interpreter
00:23:40 is probably written in C or C++ so lots of layers there are probably written in these some old fashioned efficient
00:23:49 languages that still take one step to produce these instructions produce RISC instructions but they're composed each
00:23:59 layer of software invokes one another through these interfaces and you can get ten layers of software that way so in
00:24:06 general the risk was developed here Berkeley it was kind of the three places that were
00:24:13 these radicals that advocated for this against the rest of community where IBM Berkeley and Stanford you're one of
00:24:23 these radicals and how radical did you feel how confident did you feel how doubtful were you that risk might be the
00:24:32 right approach because it may you can also Intuit that is kind of taking a step back into simplicity not forward
00:24:40 into simplicity yeah no it was easy to make yeah it was easy to make the argument against it well this was my
00:24:48 colleague John Hennessy at Stanford and I we were both assistant professors and for me I just believed in the power of
00:24:56 our ideas I thought what we were saying made sense Moore's Law is going to move fast the other thing that I didn't
00:25:03 mention is one of the surprises of these complex instruction sets you could certainly write these complex
00:25:09 instructions if the programmer is writing them in themselves it turned out to be kind of difficult for the compiler
00:25:15 to generate those complex instructions kind of ironically you'd have to find the right circumstances that that just
00:25:22 exactly fit this complex instruction it was actually easier for the compiler to generate these simple instructions so
00:25:28 not only did these complex instructions make the hard work more difficult to build often the compiler wouldn't even
00:25:36 use them and so it's harder to build the compiler doesn't use them that much the simple instructions go better with
00:25:42 Moore's Law that's you know the number of transistors is doubling every every two years so we're gonna have you know
00:25:49 the you want to reduce the time to design the microprocessor that may be more important than these number
00:25:54 instructions so I think we believed in the that we were right that this was the best idea then the question became in
00:26:02 these debates well yeah that's a good technical idea but in the business world this doesn't matter there's other things
00:26:10 that matter it's like arguing that if there's a standard with the railroad tracks and you've come up with a better
00:26:16 with but the whole world has covered railroad tracks so you'll your ideas have no chance of success
00:26:22 commercial success it was technically right but commercially it'll be insignificant yeah this it's kind of sad
00:26:29 that this world the history of human civilization is full of good ideas that lost because somebody else came along
00:26:38 first with a worse idea and it's good that in the computing world at least some of these have well well you could
00:26:43 are I mean it's probably still sisk people that say yeah still are but and what happened was what was interesting
00:26:53 Intel a bunch of the system companies with Sisk instruction sets of vocabulary they gave up but not Intel what Intel
00:27:02 did to its credit because Intel's vocabulary was in the in the personal computer and so that was a very valuable
00:27:10 vocabulary because the way we distribute software is in those actual instructions it's in the instructions of that
00:27:18 instruction set so they then you don't get that source code what the programmers wrote you get after it's
00:27:23 been translated into the last level that's if you were to get a floppy disk or download software it's in the
00:27:30 instructions that instruction set so the x86 instruction set was very valuable so what Intel did cleverly and amazingly is
00:27:40 they had their chips in hardware do a translation step they would take these complex instructions and translate them
00:27:46 into essentially in RISC instructions in Hardware on the fly you know at at gigahertz clock speeds and then any good
00:27:54 idea that risk people had they could use and they could still be compatible with us with this really valuable PC software
00:28:03 software base and which also had very high volumes you know a hundred million personal computers per year so the sisk
00:28:11 architecture in the business world was actually one in in this PC era so just going back to the the time of designing
00:28:26 risk when you design an instruction set architecture do you think like a programmer do you think like a
00:28:32 microprocessor engineer do you think like a artist a philosopher do you think in software and hardware I mean is it
00:28:43 art I see science yeah I'd say I think designing a goods instruction set as an art and I think you're trying to balance
00:28:52 the the simplicity and speed of execution with how well easy it will be for compilers to use it alright you're
00:29:00 trying to create an instruction set that everything in there can be used by compilers there's not things that are missing
00:29:08 that'll make it difficult for the program to run they run efficiently but you want it to be easy to build as well
00:29:15 so it's that kind of so you're thinking I'd say you're thinking hard we're trying to find a hardware software
00:29:21 compromise that'll work well and and it's you know it's you know it's a matter of taste right it's it's kind of
00:29:29 fun to build instruction sets it's not that hard to build an instruction set but to build one that catches on and
00:29:36 people use you know you have to be you know fortunate to be the right place at the right time or have a design that
00:29:43 people really like are using metrics says is it quantifiable because you kind of have to anticipate the kind of
00:29:49 programs that people will write yet ahead of time so is that can you use numbers can use metrics can you quantify
00:29:57 something ahead of time or is this again that's the art part where you're kind of knows it's a a big a big change kind of
00:30:04 what happened I think from Hennessey's and my perspective in the 1980s what happened was going from kind of really
00:30:15 you know taste and hunches to quantifiable in in fact he and I wrote a textbook at the end of the 1980s called
00:30:22 computer architecture a quantitative approach I heard of that and and it's it's the thing it it had a pretty big
00:30:30 big impact in the field because we went from textbooks that kind of listed so here's what this computer does and
00:30:37 here's the pros and cons and here's what this computer doesn't pros and cons to something where there were formulas
00:30:41 in equations where you could measure things so specifically for instruction sets what we do in some other fields do
00:30:52 is we agree upon a set of programs which we call benchmarks and a suite of programs and then you develop both the
00:31:00 hardware and the compiler and you get numbers on how well your your computer does given its instruction set and how
00:31:09 well you implemented it in your microprocessor and how good your compilers are and in computer
00:31:15 architecture we you know using professors terms we grade on a curve rather than greater than absolute scale
00:31:21 so when you say you know this these programs run this fast well that's kind of interesting but how do you know it's
00:31:26 better while you compare it to other computers at the same time so the best way we know how to make turned it into a
00:31:35 kind of more science and experimental and quantitative is to compare yourself to other computers or the same era that
00:31:41 have the same access the same kind of technology on commonly agreed benchmark programs so maybe two toss-up two
00:31:49 possible directions we can go one is what are the different trade-offs in designing architectures Ubben are you
00:31:56 talking about Siskin risk but maybe a little bit more detail in terms of specific features that you were thinking
00:32:04 about and the other side is what are the metrics that you're thinking about when looking at these trade-offs yeah well
00:32:12 let's talk about the metrics so during these debates we actually had kind of a hard time explaining convincing people
00:32:18 the ideas and partly we didn't have a formula to explain it and a few years into it we hit upon the formula that
00:32:27 helped explain what was going on and I think if we can do this see how it works orally just is this so the yes if I can
00:32:36 do a formula or Li L C so the so fundamentally the way you measure performance is how long does it take a
00:32:44 program to run a program if you have ten programs and typically these benchmarks were sweet because you'd want to have
00:32:49 ten programs so they could represents lots of different applications so for these ten programs how long they take to run
00:32:56 now when you're trying to explain why it took so long you could factor how long it takes a program to run into three
00:33:05 factors one of the first one is how many instructions did it take to execute so that's the that's the what we've been
00:33:10 talking about you know the instructions of Academy how many did it take all right the next
00:33:16 question is how long did each instruction take to run on average so you multiply the number instructions
00:33:23 times how long it took to run and that gets you help okay so that's but now let's look at this metric of how long
00:33:30 did it take the instruction to run well it turns out the way we could build computers today is they all have a clock
00:33:36 and you've seen this when you if you buy a microprocessor it'll say 3.1 gigahertz or 2.5 gigahertz and more gigahertz is
00:33:45 good well what that is is the speed of the clock so 2.5 gigahertz turns out to be 4 billions of instruction or 4
00:33:54 nanoseconds so that's the clock cycle time but there's another factor which is what's the average number of clock
00:34:01 cycles that takes per instructions so it's number of instructions average number of clock cycles in the clock
00:34:05 cycle time so in these risks ist's debates we would we they would concentrate on but wrist
00:34:13 makes needs to take more instructions and we'd argue what maybe the clock cycle is faster but what the real big
00:34:20 difference was was the number of clock cycles per instruction or instruction as fascinating what about the mess up the
00:34:26 beautiful mess of parallelism in the whole picture parallelism which has to do was say how many instructions could
00:34:31 execute in parallel and things like that you could think of that as affecting the clock cycles per instruction because
00:34:37 it's the average clock cycles per instruction so when you're running a program if it took a hundred billion
00:34:44 instructions and on average it took two clock cycles per instruction and they were four nanoseconds you could multiply
00:34:49 that out and see how long it took to run and there's all kinds of tricks to try and reduce the number of clock cycles
00:34:56 per instruction but it turned out that the way they would do these complex instructions is they would actually
00:35:02 build what we would call an interpreter in a simpler a very simple hardware interpreter but it turned out that for
00:35:09 sis constructions if you had to use one of those interpreters it would be like 10 clock cycles per instruction where
00:35:16 the risk instructions could be too so there'd be this factor of five advantage in clock cycles per instruction we have
00:35:23 to execute say 25 or 50 percent more instructions so that's where the wind would come and then you could make an
00:35:27 argument whether the clock cycle times are the same or not but pointing out that we could divide the benchmark
00:35:34 results time per program into three factors and the biggest difference between risk consists was the clock
00:35:40 cycles per you execute a few more instructions but the clock cycles per instruction is much less and that was
00:35:46 what this debate once we made that argument then people say okay I get it and so we went from it was outrageously
00:35:56 controversial in you know 1982 that maybe probably by 1984 so people said oh yeah technically they've got a good argument
00:36:05 what are the instructions in the RISC instruction set just to get an intuition okay 1995 I was asked scientific the future
00:36:16 of what microprocessor so I and that well as I'd seen these predictions and usually people predict something
00:36:22 outrageous just to be entertaining right and so my prediction for 2020 was you know things are gonna be pretty much
00:36:29 they're gonna look very familiar to what they are and they are in if you were to read the article you know the things I
00:36:34 said are pretty much true the instructions that have been around forever are kind of the same and that's
00:36:40 the outrageous prediction actually yeah given how fast computers and well you know Moore's law was gonna go on we
00:36:46 thought for 25 more years you know who knows but kind of the surprising thing in fact you know Hennessy and I you know
00:36:55 won the the ACM a.m. Turing award for both the RISC instruction set contributions and for that textbook I
00:37:00 mentioned but you know we are surprised that here we are 35 40 years later after we did our work and the the conventional
00:37:11 wisdom of the best way to do instruction sets is still those RISC instruction sets that look very similar to what we
00:37:17 look like you know we did in the 1980s so those surprisingly there hasn't some radical new idea even though we
00:37:25 have you know a million times as many transistors as we had back then but what are the basic constructions and how did
00:37:33 they change over the years so we're talking about addition subtract these are the specific so the the to get so
00:37:40 the things that are in a calculator you are in a computer so any of the buttons that are in the calculator in the crater
00:37:47 so the little button so if there's a memory function key and like I said those are turns into putting something
00:37:51 in memories called a store bring something back Scott load just as a quick tangent when you say memory what
00:37:58 does memory mean well I told you there were five pieces of a computer and if you remember in a calculator there's a
00:38:04 memory key so you you want to have intermediate calculation and bring it back later
00:38:08 so you'd hit the memory plus key M plus maybe and it would put that into memory and then you'd hit an REM like return
00:38:14 instruction and it bring it back in the display so you don't have to type it you don't have to write it down bring it
00:38:19 back again so that's exactly what memory is if you can put things into it as temporary storage and bring it back when
00:38:25 you need it later so that's memory and loads and stores but the big thing the difference between
00:38:32 a computer and a calculator is that the computer can make decisions and in amazingly the decisions are as simple is
00:38:40 is this value less than zero or is this value bigger than that value so there's and those instructions which are called
00:38:47 conditional branch instructions is what give computers all its power if you were in the early days of computing before
00:38:54 the what's called the general-purpose microprocessor people would write these instructions kind of in hardware and but
00:39:02 it couldn't make decisions it would just it would do the same thing over and over again with the power of having branch
00:39:09 instructions that can look at things and make decisions automatically and it can make these decisions you know billions
00:39:15 of times per second and amazingly enough we can get you know thanks to advances machine learning we can we can create
00:39:21 programs that can do something smarter than human beings can do but if you go down that very basic level it's the
00:39:27 instructions are the keys on the calculator plus the ability to make decisions of these conditional branch
00:39:33 instructions you know and all decisions fundamental can be reduced down to these - assumptions yeah so in in fact and so
00:39:41 you know going way back in the sack back to you know we did for risk projects at Berkeley in the 1980s they did a couple
00:39:50 at Stanford in the 1980s in 2010 we decided we wanted to do a new instruction set learning from the
00:39:56 mistakes of those RISC architectures of 1980s and that was done here at Berkeley almost exactly 10 years ago in the the
00:40:04 people who did it I participated but other Christos Sanne and others drove it
00:40:10 they called it risk 5 to honor those risk the four risk projects of 1980s so what is risk 5 involved so leaders 5 is
00:40:19 another instruction set of vocabulary it's learned from the mistakes of the past but it still has if you look at the
00:40:25 there's a core set of instructions it's very similar to the simplest architectures from the 1980s and the big
00:40:33 difference about risk 5 is it's open so I talked early about proprietary versus open and kind of sauce software so this
00:40:42 is an instruction set so it's a vocabulary it's not it's not hardware but by having an open instruction set we
00:40:49 can have open source implementations open source processors that people can use where do you see that going says
00:40:58 it's the really exciting possibilities but she's just like in the Scientific American if you were to predict 10 20 30
00:41:05 years from now that kind of ability to utilize open source instruction set architectures like risk 5 what kind of
00:41:14 possibilities might that unlock yeah and so just to make it clear because this is confusing the specification of risk 5 is
00:41:22 something that's like in a text book there's books about it so that's what that's kind of defining an interface
00:41:29 there's also the way you build hardware is you write it in languages they're kind of like sea but they're specialized
00:41:36 for hardware that gets translated into hardware and so these implementations of this specification are what are the open
00:41:45 source so they're written in something that's called Verilog or VHDL but it's put up on the web
00:41:52 like that you can see the C++ code for Linux on the web so that's the open instruction set enables open source
00:42:00 implementations at risk five so you can literally build a processor using this instruction set people are and people
00:42:07 are so what happened to us that the story was this was developed here for our use to do our research and we made
00:42:14 it we licensed under the berkeley software distribution license like a lot of things get licensed here so other
00:42:19 academics use it they wouldn't be afraid to use it and then about 2014 we started getting complaints that we were using it
00:42:29 in our research in our courses and we got complaints from people in industries why did you change your instruction set
00:42:36 between the fall and the spring semester and well we get complaints of additional time why the hell do you care what we do
00:42:42 with our instruction set and then when we talked to him we found out there was this thirst for this idea of an open
00:42:47 instruction set architecture and they had been looking for one they stumbled upon ours at Berkeley thought it was boy
00:42:54 this looks great we should use this one and so once we realize there is this need for an open instruction set
00:43:01 architecture we thought that's a great idea and then we started supporting it and tried to make it happen so this was
00:43:08 you know kind we accidentally stumbled into this and to this need in our timing was good and so it's really taking off
00:43:17 there's a you know universities are good at starting things but the not good it's sustaining things so like Linux has the
00:43:23 Linux Foundation there's a risk 5 foundation that we started there's there's an annual conferences and the
00:43:31 first one was done I think January 2015 and the one that was just last December in it you know it had 50 people at it
00:43:38 and the last one last December had kind of 1,700 people were at it and the companies excited all over the world
00:43:46 so if predicting into the future you know if we were doing 25 years I would predict that risk 5 will be you know
00:43:54 possibly the most popular instruction set architecture out there because it's a pretty good instruction set
00:43:59 architecture and it's open and free and there's no reason lots of people shouldn't use it and
00:44:08 there's benefits just like Linux is so popular today compared to 20 years ago I and you know the fact that you can get
00:44:17 access to it for free you can modify it you can improve it for all those same arguments and so people collaborate to
00:44:22 make it a better system for all everybody to use and that works in software and I expect the same thing
00:44:28 will happen in hardware so if you look at arm Intel mips if you look at just the lay of the land and what do you
00:44:39 think just for me because I'm not familiar how difficult this kind of transition would how much challenges
00:44:48 this kind of transition would entail do you see let me ask my dumb question another one no that's I know where
00:44:56 you're headed well there's a budget I think the thing you point out there's there's these proprietary popular
00:45:02 proprietary instruction sets the x86 and so how do we move to risk five potentially in sort of in the span of
00:45:10 five 10 20 years a kind of a unification in given that the device is the kind of way we use devices IOT mobile devices
00:45:20 and and the cloud keeps changing well part of it a big piece of it is the software stack and what right now
00:45:28 looking forward there seem to be three important markets there's the cloud and then the cloud is simply companies like
00:45:41 Alibaba and Amazon and Google Microsoft having these giant data centers with tens of thousands of servers in maybe a
00:45:48 hunt maybe a hundred of these data centers all over the world and that's what the cloud is so the computer that
00:45:54 dominates the cloud is the x86 instruction set so the instructions are the vocal instructor sets using the
00:46:02 cloud of the x86 almost almost 100% of that today is x86 the other big thing are cell phones and laptops those are
00:46:12 the big things today I mean the PC is also dominated by the x86 instruction set but those
00:46:17 sales are dwindling you know there's maybe 200 million pcs a year and there's I serve one and a half billion phones a
00:46:25 year there's numbers like that so for the phones that's dominated by arm and now and a reason that I talked about the
00:46:36 software stacks and then the third category is Internet of Things which is basically embedded devices things in
00:46:42 your cars and your microwaves everywhere so what's different about those three categories is for the cloud the software
00:46:50 that runs in the cloud is determined by these companies Alibaba Amazon Google Microsoft so that they control that
00:46:57 software stack for the cell phones there's both for Android and Apple the software they supply but both of them
00:47:04 have marketplaces where anybody in the world can build software and that software is translated or you know
00:47:13 compiled down and shipped in the vocabulary of arm so that's the the what's referred to as binary compatible
00:47:21 because the actual it's the instructions are turned into numbers binary numbers and shipped around the world so and the
00:47:27 size just a quick interruption so arm what is arm as arm is an instructions like a risk-based yeah it's a risk-based
00:47:35 instruction as a proprietary one arm stands for advanced RISC machine erm is the name where the company is so it's a
00:47:46 proprietary RISC architecture so and it's been around for a while and you know the surely the most popular
00:47:51 instruction set in the world right now they every year billions of chips are using the arm design in this post PC era
00:48:00 is what it was the one of the early risk adopters of the risk yeah yeah the first arm goes back I don't know 86 or so so
00:48:07 Berkeley instead did their work in the early 80s their arm guys needed an instruction set and they read our papers
00:48:17 and it heavily influenced them so getting back my story what about Internet of Things well software's not
00:48:21 shipped in Internet of Things it's the the embedded device people control that software stack so you would the opportune
00:48:31 these four risk five everybody thinks is in the internet of things embedded things because there's no dominant
00:48:37 player like there is in the cloud or the smartphones and you know it's it's doesn't have a lot of licenses
00:48:45 associated with and you can enhance the instruction set if you want and it's a in and people have looked at instruction
00:48:51 sets and think it's a very good instruction set so it appears to be very popular there it's possible that in the
00:49:00 cloud people those companies control their software stacks so that it's possible that they would decide to use
00:49:07 verse five if we're talking about ten and twenty years in the future the one of the be harder it would be the cell
00:49:14 phones since people ship software in the arm instruction set that you'd think be the more difficult one but if if risk
00:49:20 five really catches on and you know you could in a period of a decade you can imagine that's changing over to give a
00:49:27 sense why risk five our arm is dominated you mentioned these three categories why has why did arm dominate why does it
00:49:33 dominate the mobile device base and maybe the my naive intuition is that there are some aspects of power
00:49:41 efficiency that are important yeah that somehow come along with risk well part of it is for these old Siskin structions
00:49:53 that's like in the x86 it it was more expensive to these for the you know they're older so they have disadvantages
00:50:02 in them because they were designed forty years ago but also they have to translate in hardware from sis
00:50:08 constructions to risks instructions on the fly and that costs both silicon area that the chips are bigger to be able to
00:50:16 do that and it uses more power so arm his which has you know followed this risk philosophy is seen to be much more
00:50:23 energy-efficient and in today's computer world both in the cloud in cell phone and you know things it isn't the
00:50:32 limiting resource isn't the number of transistors you can fit in the chip it's what how much power can you dissipate
00:50:38 for your application so by having a reduced instruction set you that's possible to have
00:50:44 a simpler hardware which is more energy efficient in energy efficiency is incredibly important in the cloud when
00:50:50 you have tens of thousands of computers in a datacenter you want to have the most energy-efficient ones there as well
00:50:55 and of course for embedded things running off of batteries you want those to be energy efficient in the cell
00:51:01 phones too so it I think it's believed that there's a energy disadvantage of using these more complex instruction set
00:51:13 architectures so the other aspect of this is if we look at Apple Qualcomm Samsung Huawei all use the ARM
00:51:21 architecture and yet the performance of the systems varies I mean I don't know whose opinion you take on but you know
00:51:28 Apple for some reason seems to perform better and try these implementations architecture so where's the magic and
00:51:34 sure that happened yeah so what arm pioneered was a new business model as they said well here's our proprietary
00:51:41 instruction set and we'll give you two ways to do it eat there we'll give you one of these implementations written in
00:51:50 things like C called Verilog and you can just use ours well you have to pay money for that not only pay will give you the
00:51:58 you know will license use to do that or you could design your own and so we're talking about numbers like tens of
00:52:04 millions of dollars to have the right to design your own since they it's the instruction set belongs to them so Apple
00:52:12 got one of those the right to build their own most of the other people who build like Android phones just get one
00:52:20 of the designs from arm and to do it themselves so Apple developed a really good microprocessor design team they you know
00:52:31 acquired a very good team that had was a building other microprocessors and brought them into the company to build
00:52:37 their designs so the instruction sets are the same the specifications are the same but their hardware design is much
00:52:43 more efficient than I think everybody else's and that's given Apple an advantage in the marketplace and that
00:52:54 the iPhones tend to be the faster than most everybody else's phones that are they it'd be nice to be able to jump around
00:53:01 and kind of explore different little sides of this but let me ask one sort of romanticized question what to you is the
00:53:10 most beautiful aspect or idea of risk instruction set or instruction sets for this you know what I think that you know
00:53:18 I I'm you know I I was always attracted to the idea of you know smallest beautiful why is that the temptation in
00:53:26 engineering it's kind of easy to make things more complicated it's harder to come up with a it's more difficult
00:53:32 surprising they come up with a simple elegant solution and I think that there's a bunch of small features of of
00:53:41 risk in general that you know where you can see this examples of keeping it simpler makes it more elegant
00:53:47 specifically in risk five which you know I'm I was kind of the mentor in the program but it was really driven by
00:53:53 christos sama and two grad students Andrew Waterman Yin Sibley is they hit upon this idea of having a
00:54:04 subset of instructions a nice simple instruction subset instructions like 40-ish instructions that all software
00:54:12 the software status v can run just on those forty instructions and then they provide optional features that could
00:54:20 accelerate the performance instructions that if you needed them could be very helpful but you don't need to have them
00:54:26 and that that's a new really a new idea so risk five has right now maybe five optional subsets that you can pull in
00:54:34 but the software runs without them if you just want to build the just the core forty instructions that's fine you can
00:54:42 do that so this is fantastic educationally is so you can explain computers you only have to explain forty
00:54:48 instructions and not thousands of them also if you invent some wild and crazy new technology like you know biological
00:54:57 computing you'd like a nice simple instruction set and you can risk 5e if you implement those core instructions
00:55:03 you can run you know really interesting programs on top of that so this idea of a core set of instructions that the
00:55:10 software stack runs on and then optional features that if you turn them on the compilers where used
00:55:16 but you don't have to I think is a powerful idea what's happened in the past if for the proprietary instruction
00:55:24 sets is when they add new instructions it becomes required piece and so that all all microprocessors in the future
00:55:33 have to use those instructions so it's kind of like is for a lot of people as they get older they gain weight
00:55:40 all right is it that weight and age are correlated and so you can see these instruction sets get getting bigger and
00:55:46 bigger as they get older so risk five you know let's you be as slim as your as a teenager and you only have to add
00:55:53 these extra features if you're really gonna use them rather than every you have no choice you have to keep growing
00:55:58 with the instruction set I don't know if the analogy holds out but that's a beautiful notion that there's it's
00:56:04 almost like a nudge towards here's the simple core that's the essential yeah I think the surprising thing is still if
00:56:12 we if we brought back you know the pioneers from the 1950s and showed them the instruction set architectures they'd
00:56:19 understand it they that doesn't look that different well you know I'm surprised and it's if there's it may be
00:56:24 something you know to talk about philosophical things I mean there may be something powerful about those you know
00:56:34 forty or fifty instructions that all you need is these commands like these instructions that we talked about and
00:56:42 that is sufficient to build to bring upon you know artificial intelligence and so it's a remarkable surprising to
00:56:58 Minoo microprocessors where the line widths are narrower than the wavelength of light you know is this amazing
00:57:06 technologies at some fundamental level the commands that software execute are really pretty straightforward and
00:57:13 haven't changed that much in in decades it's what a surprising outcome so underlying all computation all Turing
00:57:21 machines all artificial intelligent systems perhaps might be a very simple instruction set like like a risk 5 or it's yeah I
00:57:30 mean I that's kind of what I said I was interested to see I had another more senior faculty colleague and he he had
00:57:35 written something in Scientific American in you know his 25 years in the future and his turned out about when I was a
00:57:43 young professor and he said yep I checked it I was interest to see how that was going to turn out for me and
00:57:51 it's pretty held up pretty well but yeah so there's there's probably there's something I you know there's there must
00:57:57 be something fundamental about those instructions that were capable of creating you know intelligence and from
00:58:07 pretty primitive operations and just doing them really fast you kind of mentioned the different maybe radical
00:58:14 computational medium like biological and there's other ideas so there's a lot of spaces in a6 or domain-specific and then
00:58:22 there could be quantum computers and wood so we couldn't think of all those different mediums and types of
00:58:28 computation what's the connection between swapping out different Hardware systems and the instruction set do you
00:58:36 see those as disjoint or they fundamentally coupled yeah so what's so kind of if we go back to the history you
00:58:45 know when Moore's Law is in full effect and you're getting twice as many transistors every couple of years you
00:58:52 know kind of the challenge for computer designers is how can we take advantage of that how can we turn those
00:58:58 transistors into better computers faster typically and so there was an era I guess in the 80s and 90s where computers
00:59:08 were doubling performance every 18 months and if you weren't around then what would happen is you had your
00:59:16 computer and your friend's computer which was like a year year and a half newer and it was much faster than your
00:59:23 computer and you he he or she could get their work done much faster than your typical user so people took their
00:59:29 computers perfectly good computers and threw them away to buy a newer computer because the computer one or two years
00:59:37 later was so much faster so that's what the world was like in 80s and 90s well with the slowing down of Moore's law that's
00:59:46 no longer true right he not now with you know not decide computers with the laptops I only get a new laptop when it
00:59:53 breaks right well damn the disk broke or this display broke I got to buy a new computer but before you would throw them
00:59:59 away because it just they were just so sluggish compared to the latest computers so that's you know that's a
01:00:11 huge change of what's gone on so but yes since this lasted for decades kind of programmers and maybe all society is
01:00:18 used to computers getting faster regularly it we now now believe those of us who are in computer design it's
01:00:26 called computer architecture that the path forward is instead is to add accelerators that only work well for
01:00:35 certain applications so since Moore's law is slowing down we don't think general-purpose computers
01:00:44 are gonna get a lot faster so the Intel processors of the world are not going to haven't been getting a lot faster
01:00:51 they've been barely improving like a few percent a year it used to be doubling your 18 months
01:00:56 and now it's doubling every 20 years so it was just shocking so to be able to deliver on what Moore's law used to do
01:01:02 we think what's going to happen what is happening right now is people adding accelerators to their microprocessors
01:01:11 that only work well for some domains and by sheer coincidence at the same time that this is happening has been this
01:01:19 revolution in artificial intelligence called machine learning so with as I'm sure your other guess I've said you know
01:01:30 a I had these two competing schools of thought is that we could figure out artificial intelligence by just writing
01:01:36 the rules top-down or that was wrong you had to look at data and infer what the rules are the machine learning and
01:01:44 what's happened in the last decade or eight years this machine learning has won and it turns out that machine
01:01:51 learning the hardware you built from learning is pretty much multiply the matrix multiply is a key feature for the
01:02:01 way people machine learning is done so that's a godsend for computer designers we know how to make metrics multiply run
01:02:08 really fast so general-purpose microprocessors are slowing down we're adding accelerators from machine
01:02:13 learning that fundamentally are doing matrix multiplies much more efficiently than general-purpose computers have done
01:02:20 so we have to come up with a new way to accelerate things the danger of only accelerating one application is how
01:02:26 important is that application turns it turns out machine learning gets used for all kinds of things so serendipitously
01:02:34 we found something to accelerate that's widely applicable and we don't even we're in the middle of this revolution
01:02:41 of machine learning we're not sure what the limits of machine learning are so this has been kind of a godsend if
01:02:48 you're going to be able to Excel deliver on improved performance as long as people are moving their programs to be
01:02:56 embracing more machine learning we know how to give them more performance even as Moore's Law is slowing down and counter-intuitively
01:03:06 the machine learning mechanism you can say is domain-specific but because it's leveraging data it's actually could be
01:03:16 very broad in terms of in terms of the domains it could be applied in yeah that's exactly right sort of it's almost
01:03:23 sort of people sometimes talk about the idea of software 2.0 we're almost taking another step up in the abstraction layer
01:03:32 in designing machine learning systems because now you're programming in the space of data in the space of hyper
01:03:38 parameters it's changing fundamentally the nature of programming and so the specialized devices that that accelerate
01:03:45 the performance especially neural network based machine learning systems might become the new general yes so the
01:03:53 this thing that's interesting point out these are not coral these are not tied together the it's enthusiasm about
01:04:02 machine learning about creating programs driven from data that we should figure out the answers from
01:04:07 rather than kind of top down which classically the way most programming is done in the way artificial intelligent
01:04:12 used to be done that's a movement that's going on at the same time coincidentally and the the
01:04:19 first word machine learnings machines right so that's going to increase the demand for computing because instead of
01:04:27 programmers being smart writing those those things down we're going to instead use computers to exam a lot of data to
01:04:33 kind of create the programs that's the idea and remarkably this gets used for all kinds of things very successfully
01:04:41 the image recognition the language translation the game playing and you know it gets into pieces of the software
01:04:50 stack like databases and stuff like that we're not quite sure how journal purposes but that's going on independent
01:04:55 as Hardware stuff what's happening on the hardware side is Moore's Law is slowing down right when we need a lot
01:05:01 more cycles it's failing us it's failing us right when we need it because there's going to be a greater in peace a greater
01:05:08 increase in computing and then this idea that we're going to do so-called domain-specific here's a domain that
01:05:14 your greatest fear is you'll make this one thing work and that'll help you know 5% of the people in the world well this
01:05:22 this looks like it's a very general-purpose thing so the timing is fortuitous that if we can perhaps if we
01:05:30 can keep building hardware that will accelerate machine learning the neural networks that'll beat the timing D right
01:05:39 that that neural network revolution will transform your software the so called software 2.0 and the software the future
01:05:46 will be very different from the software the past and just as our microprocessors even though we're still going to have
01:05:53 that same basic risk instructions to run a big pieces of the software stack like user interfaces and stuff like that we
01:06:00 can accelerate the the kind of the small piece that's computationally intensive it's not lots of lines of code but there
01:06:06 it takes a lot of cycles to run that code that that's going to be the accelerator piece and so this that's
01:06:12 what makes this from a computer designer's perspective a really interesting decade but Hennessy and I
01:06:18 talked about that the title of our Turing warrant speech is a new golden age we we see
01:06:26 this as a very exciting decade much like when we were assistant professors and the wrists stuff was going on that was a
01:06:32 very exciting time was where we were changing what was going on we see this happening again tremendous opportunities
01:06:39 of people because we're fundamentally changing how software is built and how we're running it so which layer of the
01:06:45 abstraction do you think most of the acceleration might be happening the if you look in the next ten years that
01:06:52 Google is working on a lot of exciting stuff with the TPU sort of there's a closer to the hardware that could be
01:06:59 optimizations around the IROC closer to the instruction set that could be optimization at the compiler level it
01:07:04 could be even at the higher level software stack yeah it's going to be I mean if you think about the old risks
01:07:11 this debate it was both it was software hardware it was the compilers improving as well as the
01:07:18 architecture improving and that that's likely to be the way things are now with machine learning they they're using
01:07:27 domain-specific languages the languages like tensorflow and pi torch are very popular with the machine learning people
01:07:34 that those are the raising the level of abstraction it's easier for people to write machine learning in these
01:07:41 domain-specific languages like like a PI torch in tensorflow so where the most of the optimization
01:07:47 but yeah and so that and so there'll be both the compiler piece and the hardware piece underneath it so as you kind of
01:07:54 the fatal flaw for hardware people is to create really great hardware but not have brought along the compilers and
01:08:01 what we're seeing right now in the marketplace because of this enthusiasm around hardware for machine learning is
01:08:08 getting you know probably a billions of dollars invested in start-up companies we're seeing startup companies go
01:08:15 belly-up because they focus on the hardware but didn't bring the software stack along we talked about benchmarks
01:08:23 earlier so I participated in machine learning didn't really have a set of benchmarks I think just two years ago
01:08:28 they didn't have a set of benchmarks and we've created something called ml perf which machine learning benchmark suite and
01:08:37 pretty much the companies who didn't invest in the software stack couldn't run a ml per fairy wall and the ones who
01:08:43 did invest in software stack did and we're seeing you know like kind of in computer architecture this is what
01:08:48 happens you have these arguments about risk versus ist's people spend billions of dollars in the marketplace to see who
01:08:53 wins and it's not it's not a perfect comparison but it kind of sorts things out and we're seeing companies go out of
01:09:01 business and then companies like like there's a company in Israel called Habana they came up with machine
01:09:08 learning accelerators that they had good ml perf scores Intel had acquired a company earlier called nirvana
01:09:16 a couple years ago they didn't reveal the amount of Perth's cores which was suspicious but month ago
01:09:22 Intel announced that they're cancelling the Nirvana product line and they've bought Habana for two billion dollars
01:09:29 and Intel's going to be shipping Habano chips which have hardware and software and run the ml perf programs pretty well
01:09:35 and that's going to be their product line in the future brilliant so maybe just a linker briefly I'm a love metrics
01:09:43 I love standards that everyone can gather around what are some interesting aspects of that portfolio of metrics
01:09:50 well one of the interesting metrics is you know what we thought it was you know we I was involved in the start you know
01:09:58 we that Peter Matson is leading the effort from Google Google got it off the ground but we had to reach out to
01:10:05 competitors and say there's no benchmarks here this we didn't we think this is bad for the field it'll be much
01:10:10 better if we look at examples like in the wrist days there was an effort to create a for the the people in the risk
01:10:17 community got together competitors got together a building risk microprocessors to agree on a set of benchmarks that we
01:10:22 called spec and that was good for the industry is rather before the different risk architectures were arguing well you
01:10:28 can believe my performance others but those other guys are liars and that didn't do any good so we agreed on a set
01:10:35 of benchmarks and then we could figure out who is faster between the various risk architectures but it was a little
01:10:41 bit faster but that drew the market rather than you know people were afraid to buy anything so we argued the same
01:10:44 thing would happen with him helper you know companies like Nvidia were you know maybe worried that
01:10:51 it was some kind of trap but eventually we all got together to create a set of benchmarks and do the right thing right
01:10:59 and we agree on the results and so we can see whether TP use or GPUs or CPUs are really faster than how much the
01:11:06 faster and I think from an engineer's perspective as long as the results are fair Europe you can live with it okay
01:11:13 you know you have a tip your hat to to your colleagues at another institution boy they did a better job than this what
01:11:19 you what you hate is if it's it's false right they're making claims and it's just marketing and you know in
01:11:25 that's affecting sales so you from an engineer's perspective as long as it's a fair comparison and we don't come in
01:11:30 first place that's too bad but it's fair so we wanted to create that environment frame all perf and so now there's ten
01:11:39 companies I mean ten universities and fifty companies involved so pretty much AML perf has is the is the way you
01:11:49 measure machine learning performance and and it didn't exist even two years ago one of the cool things that I enjoy
01:11:55 about the Internet has a few downsides but one of the nice things is people can see through BS a little better with the
01:12:03 presence yes has a metrics it's so it's really nice a companies like Google and Facebook and Twitter now it's the cool
01:12:10 thing to do is to put your engineers forward and to actually show off how well you do on these metrics there's not
01:12:18 sort of it well there's a less of a desire to do marketing a less so in my in my sort of naive no I don't think
01:12:25 well I was trying to understand that you know what's changed from the 80s in this era I think because of things like
01:12:31 social networking Twitter and stuff like that if you if you put up you know stuff right that's just you
01:12:40 know miss purposely misleading you know that you you can get a violent reaction in social media pointing out the flaws
01:12:48 in your arguments right and so from a marketing perspective you have to be careful today that you didn't have to be
01:12:55 careful that there'll be people who put off the flaw you can get the word out the flaws and what you're saying much
01:13:02 more easily today than in the past you used to be it was used to be easier to get away with it and the other thing
01:13:07 that's been happening in terms of starting off engineers it's just in the software side people have largely
01:13:16 embraced open-source software it it was 20 years ago it was a dirty word at Microsoft and today Microsoft is one of
01:13:22 the big proponents of open source software the kind of that's the standard way most software gets built which
01:13:29 really shows off your engineers because you can see if you look at the source code you can see who are making the
01:13:36 commits who's making the improvements who are the engineers at all these companies who are are you know really
01:13:45 great programmers and engineers and making really solid contributions which enhances their reputations and the
01:13:51 reputation of the companies so but that's of course not everywhere like in this space that I work more in is
01:13:58 autonomous vehicles and they're still the machinery of hype and marketing is still very strong there and there's less
01:14:04 willingness to be open in this kind of open source way and sort of benchmark so ml Perez represents the machine learning
01:14:11 world is much better being open-source about holding itself to standards of different the amount of incredible
01:14:18 benchmarks in terms of the different computer vision naturally new processing - inaudible
01:14:25 it you know historically it wasn't always that way I had a graduate student working with me David Martin so for in
01:14:33 computer in some fields benchmarking is been around forever so computer architecture databases maybe operating
01:14:44 systems benchmarks are the way you measure progress but he was working with me and then started working with gender
01:14:51 Malik and he's a gender Malik in computer vision space who I guess you've you interviewed yes and David Martin
01:14:58 told me they don't have benchmarks everybody has their own vision algorithm in the way that my here's my image look
01:15:05 at how well I do and everybody had their own image so David Martin back when he did his dissertation
01:15:11 figured out a way to do benchmarks he had a bunch of graduate students identify images and then ran benchmarks
01:15:18 to see which algorithms run well and that was as far as I know kind of the first time people did benchmarks in
01:15:26 computer vision in which was predated all you know the things that eventually led to imagenet himself like that but
01:15:31 then you know the vision community got religion and then once we got as far as image net then that let the guys in
01:15:40 Toronto be able to win the image net competition and then you know that changed the whole world it's a scary
01:15:47 step actually because when you enter the world of benchmarks you actually have to be good to participate as opposed to
01:15:54 yeah you can just you just believe you're the best in the world and I think the people I think they weren't
01:16:02 purposely misleading I think if you don't have benchmarks I mean how do you know you know you could have your
01:16:07 intuition it's kind of like the way we did used to do computer architecture your intuition is that this is the right
01:16:12 instruction set to do this job I believe in my experience my hunch is that's true we had to get to make things more
01:16:21 quantitative to make progress and so I just don't know how you know in fields that don't have benchmarks I don't
01:16:27 understand how they figure out how they're making progress we're kind of in the vacuum tube days of quantum
01:16:35 computing what are your thoughts in this wholly different kind of space of architectures  you know I actually you
01:16:43 know quantum computing his ideas been around for a while and I actually thought well sure hope I retire before I
01:16:51 have to start teaching this I'd say because I talked about give these talks about the slowing of Moore's law and you
01:16:59 know when we need to change by doing domain-specific accelerators common questions say what about quantum
01:17:04 computing the reason that comes up it's in the news all the time so I think the keep and the third thing to keep in mind
01:17:10 is quantum computing is not right around the corner there have been two national reports one by the national campus of
01:17:17 engineering another by the computing consortium where they did a frank assessment of quantum computing
01:17:25 in both of those reports said you know as far as we can tell before you get error corrected quantum computing it's a
01:17:32 decade away so I think of it like nuclear fusion right there been people who've been excited about nuclear fusion
01:17:37 a long time if we ever get nuclear fusion it's going to be fantastic for the world I'm glad people are working on
01:17:43 it but you know it's not right around the corner that those two reports to me say probably it'll be 2030 before
01:17:52 quantum computing is a something that could happen and when it does happen you know this is going to be big science
01:18:00 stuff this is you know microkelvin almost absolute zero things that if they vibrate if truck goes by it won't work
01:18:07 right so this will be in data center stuff we're not gonna have a quantum cell phone and and it's probably a 2030
01:18:15 kind of thing so I'm happy that other people are working on it but just you know it's hard with all the news about
01:18:20 it not to think that it's right around the corner and that's why we need to do something as Moore's Law is slowing down
01:18:29 to provide the computing keep improving getting better for this next decade and and you know we shouldn't be betting on
01:18:37 quantum computing are expecting quantum computing to deliver in the next few years it's it's probably further off you
01:18:44 know I I'd be happy to be wrong it be great if quantum computing is gonna commercially viable but it will be a set
01:18:49 of applications it's not a general-purpose computation so it's gonna do some amazing things but
01:18:54 there'll be a lot of things that probably you know the the old-fashioned computers are gonna keep doing better
01:19:01 for quite a while and there'll be a teenager 50 years from now watching this video saying look how silly David
01:19:08 Patterson was saying I said what did 2030 I didn't say sorry I never we're not gonna have quantum cellphones so he's
01:19:16 gonna be watching and well I mean III think this is such a you know given we've had Moore's law I just I feel
01:19:24 comfortable trying to do projects that are thinking about the next decade I I admire people who are trying to do
01:19:30 things that are 30 years out but it's such a fast-moving field I just don't know how to I'm
01:19:36 not good enough to figure out what what's the problems gonna be in 30 years you know 10 years is hard enough for me
01:19:43 so maybe if it's possible to untangle your intuition a little bit I spoke with Jim Keller I don't know if
01:19:50 you're familiar with Jim and he he is trying to sort of be a little bit rebellious and to try to think that he
01:19:58 quotes me as being wrong yeah so what are your the relationship for the record Jim talks about that he has an intuition
01:20:07 that Moore's law is not in fact in fact dead yet and then it may continue for some time to come
01:20:13 what are your thoughts about Jim's ideas in this space yeah this is just this is just marketing so but Gordon Moore said
01:20:22 is a quantitative prediction if we can check the facts right which is doubling the number of transistors every two
01:20:29 years so we can look back at Intel for the last five years and ask him let's look at DRAM chips six years ago so that
01:20:40 would be three two-year periods so then our DRAM chips have eight times as many transistors as they did six years ago we
01:20:48 can look up Intel microprocessors six years ago if Moore's law is continuing it should
01:20:54 have eight times as many transistors as six years ago the answers in both those cases is no the problem has been because
01:21:05 Moore's law was kind of genuinely embraced by the semiconductor industries they would make investments in severe
01:21:13 equipment to make Moore's Law come true semiconductor improving in Moore's law in many people's mind are the same thing
01:21:22 so when I say and I'm factually correct that Moore's law is no longer holds we are not doubling transistors every years
01:21:31 years the downside for a company like Intel is people think that means it stopped that technology has no longer
01:21:42 improved and so Jim is trying to react at AraC the impression that semiconductors are frozen in 2000
01:21:51 nineteen are never gonna get better so I never said that I said was Moore's law is no more and I'm strictly looking at a
01:21:59 number of transistors because that's what more that's what Moore's law is there's the I don't know there's been
01:22:07 this aura associated with Moore's law that they've enjoyed for fifty years about look at the field we're in we're
01:22:14 doubling transistors every two years what an amazing field which is an amazing thing that they were able to
01:22:19 pull off but even as Gordon Moore said you know no exponential can last forever it's lasted for 50 years which is
01:22:25 amazing and this is a huge impact on the industry because of these changes that we've been talking about so he claims
01:22:33 because he's trying to act and he claims you know Patterson says Moore's laws know more and look at all look at it
01:22:40 it's still controlling and tsmc to say it's as no longer but there but there's quantitative evidence that Moore's law
01:22:46 is not continuing so what I say now to try and okay I understand the perception problem when I say Moore's law is
01:22:55 stopped okay so now I say Moore's law slowing down and I think Jim which is another way if he's if it's predicting
01:23:02 every two years and I say it's slowing down then that's another way of saying it doesn't hold anymore and and I think
01:23:09 Jim wouldn't disagree that it's slowing down because that sounds like it's things are still getting better just not
01:23:16 as fast which is another way of saying Moore's law isn't working anymore it's still good for marketing but  but
01:23:23 what's your you're not you don't like expanding the definition of Moore's law sort of  well yeah that's really yeah
01:23:30 it's an educator you know are you know is this like bonding politics is everybody get their own facts
01:23:37 or do we have Moore's law was a crisp you know amorous Carver Mead looked at his observations drawing on a log-log
01:23:47 scale a straight line and that's what the definition of Moore's law is there's this other what Intel did for a while
01:23:55 interestingly before Jim joined them they said oh no Morris lies in the number of doubling isn't really doubling
01:23:59 transistors every two years Moore's law is the cost of the individual dressed
01:24:06 sister going down cutting in half every two years now that's not what he said but they reinterpreted it because they
01:24:13 believed that the that the cost of transistors was continuing to drop even if they couldn't get twice as many
01:24:20 people industry have told me that's not true anymore that basically then the in more recent technologies that got more
01:24:26 complicated the actual cost of transistor went up so even even the a corollary might not be true but
01:24:35 certainly you know Moore's law that was the beauty of Moore's law it was a very simple it's like equals mc-squared right
01:24:42 it was like wow what an amazing prediction it's so easy to understand the implications are amazing and that's
01:24:48 why it was so famous as a as a prediction and this this reinterpretation of what it meant and
01:24:55 changing is you know his revisionist history and I I'd be happy and and they're not claiming there's a new
01:25:04 Moore's law they're not saying by the way it's instead of every two years it's every three years I don't think the I
01:25:11 don't think they want to say that I think what's going to happen is the new technology Commission's H ones get a
01:25:17 little bit slower so it it is slowing down the improvements will won't be as great and that's why we need to do new
01:25:25 things yeah I don't like that the the idea of Moore's law is tied up with marketing I it would be nice if it's
01:25:33 whether it's marketing or it's it's well it could be affecting business but they could also be infecting the imagination
01:25:40 of engineers is if if Intel employees actually believe that we're frozen in 2019 well that's that would be bad for
01:25:47 Intel they not just Intel but everybody it's inspired Moore's law is inspiring yeah everybody but what's happening
01:25:57 right now talking to people in who have working in national offices and stuff like that a lot of the computer science
01:26:04 community is unaware that this is going on right that we are in an era that's going to need radical change at lower
01:26:10 levels that could affect the whole software stack this you know if if the Intel if you're using cloud stuff
01:26:20 and servers that you get next year are basically only a little bit faster than the servers you got this year you need
01:26:25 to know that and we need to start innovating to start delivery blow on it if you're counting on your software your
01:26:32 software going to add a lot more features assuming the computers can get faster that's not true so are you gonna
01:26:38 have to start making your software stack more efficient or are you gonna have to start learning about machine learning so
01:26:44 it's you know it's kind of a it's a morning or call for arms that the world is changing right now and a lot of
01:26:50 people a lot of computer science PhDs are unaware of that so a way to try and get their attention is to say that
01:26:57 Moore's law is slowing down and that's gonna affect your assumptions and you know we're trying to get the word out
01:27:04 and when companies like TSMC and Intel say oh no no no Moore's law is fine then people think okay that I don't have to
01:27:10 change my behavior I'll just get the next servers and you know if they start doing measurements though realize what's
01:27:16 going on it'd be nice to have some transparency and metrics for for the layperson to be able to know if computers are
01:27:25 getting faster and there are yeah there are there are a bunch of most people kind of use clock rate as a measure
01:27:32 performance you know it's not a perfect one but if you've noticed clock rates are more or less the same as they were
01:27:39 five years ago computers are a little better than they aren't they haven't made zero progress but they've made
01:27:45 small progress so you there's some indications out there and in our behavior right nobody buys the next
01:27:51 laptop because it's so much faster than the laptop from the past four cell phones I think I don't know why people
01:28:01 buy new cell phones you know because of the new ones announced the cameras are better but that's kind of
01:28:05 domain-specific right they're putting special purpose hardware to make the processing of images go much better so
01:28:12 that's that that's the way they're doing it they're not particularly it's not that the ARM processor there's twice as
01:28:18 fast as much as they'd added accelerators to help eat the experience of the phone
01:28:24 can we talk a little bit about one other exciting space arguably the same level of impact as your work with risk is raid
01:28:37 and in your in 1988 you co-authored a paper a case for redundant array of inexpensive disks hence our AI D rate so
01:28:46 you that's where you introduce the idea rate incredible that that little I mean little that paper kind of had this
01:28:54 ripple effect and had a really revolutionary effect so first what is rate what is rate so this is work I did
01:29:02 with my colleague Randy Katz and a star graduate student Garth Gibson so we had just done the fourth generation risk
01:29:13 project and Randy Kass which had early Apple Macintosh computer at this time everything was done with floppy disks
01:29:25 which are old technologies that to could store things that didn't have much capacity and you had to to get any work
01:29:30 done you're always sticking in your little floppy disk in and out because they didn't have much capacity but they
01:29:36 started building what are called hard disk drives which is magnetic material that can remember information storage
01:29:45 for the Mac and Randy asked the question when he saw this disk next to his Mac jeez he's a brand-new small things
01:29:54 before that for the big computers that the disk would be the size of washing machines and here's something the size
01:30:01 of a kind of the size of a book or so this is I wonder what we could do with that well we the Randy was involved in
01:30:10 the in the fourth generation risk project here at Berkeley 80s so we figured out a way how to make the
01:30:15 computation part the processor part go a lot faster but what about the storage part can we do something to make it
01:30:24 faster so we hit upon the idea of taking a lot of these disks developed for personal computers and mackintoshes and
01:30:29 putting many of them together instead of one of these washing machine sized things and so we were to rub the first
01:30:35 draft of the paper and we'd have 40 of these little PC DOS instead of one of these washing machine
01:30:41 size things and they would be much cheaper because they're made for PCs and they could actually kind of be faster
01:30:46 because there was 40 of them rather than one of them and so he wrote a paper like that and send it to one of a former
01:30:52 Berkeley students at IBM and he said well this is all great and good but what about the reliability of these things
01:30:59 now you have 40 of these devices each of which are kind of PC quality so they're not as good as these IBM washing
01:31:06 machines IBM dominated the the the storage Genesis so you reliably gonna be awful and so when we
01:31:13 calculated it out instead of you know it breaking on average once a year it would break every two weeks so we thought
01:31:21 about the idea and said well we got to address the reliability so we did it originally performance but we had do
01:31:27 reliability so the name redundant array of inexpensive disks is array of these disks inexpensive life for pcs but we
01:31:36 have extra copies so if one breaks we won't lose all the information will have enough redundancy that we could let some
01:31:42 break and we can still preserve the information so the name is an array of inexpensive discs this is a collection
01:31:49 of these pcs and the are part of the name was the redundancy so they'd be reliable and it turns out if you put a
01:31:55 modest number of extra disks in one of these arrays it could actually not only be as faster and cheaper that one of
01:32:01 these washing machine discs it could be actually more reliable because you could have a couple of breaks even with these
01:32:08 cheap discs whereas one failure with the washing machine thing would knock it out did you did you have a sense just like
01:32:16 with risk that in the 30 years that followed raid would take over as a as a man I think George I I'd say I think I'm
01:32:29 naturally an optimist but I thought our ideas were right I thought kind of like Moore's law it
01:32:34 seemed to me if you looked at the history of the disk drives they went from washing machine size
01:32:38 things than they were getting smaller and smaller and the volumes were with the smaller disk drives because that's
01:32:46 where the PCs were so we thought that was a technological trend that disk drives the volume
01:32:52 disk drives was going to be small getting smaller and smaller devices which were true they were the size of
01:32:58 the I don't know eight inches diameter than five inches than three inches of diameters and so that it made sense to
01:33:05 figure out how to deal things with an array of disks so I think it was one of those things where logically we think
01:33:12 the technological forces were on our side that it made sense so we expected it to catch on but there was that same
01:33:20 kind of business question you know IBM was the big pusher of these disk drives in the real world where the technical
01:33:26 advantage get turned into a business advantage or not it proved to be true it did in so you know we thought we were
01:33:35 sound technically and it was unclear worth of the business side but we kind of as academics we believe the
01:33:42 technology should win and and it did and and if you look at those thirty years just from your perspective are there
01:33:47 interesting developments in the space of storage that have happened in that time yeah the big thing that happened both a
01:33:54 couple of things that happened what we did had a modest amount of storage so as redundancy as people built bigger and
01:34:03 bigger storage systems they've added more we doesn't see so they could have more failures and they have biggest
01:34:08 thing that happened in storage is for decades it was based on things physically spinning called hard disk
01:34:16 drives where you used to turn on your computer and it would make a noise what that noise was was the disk drive
01:34:22 spinning and they were rotating it in like 60 revolutions per second and it's like if you remember the vinyl vinyl
01:34:31 records if you've ever seen those that's what it looked like and there was like a needle like on a vinyl record that was
01:34:37 reading it so the big drive a change is switching that over to a similar technology called flash so within the
01:34:45 last I'd say about decade is increasing fraction of all the computers in the world are using semiconductor for
01:34:53 storage the flash drive instead of being magnetic their optical their there well their semiconductor writing of
01:35:03 information into very densely and that's been a huge difference so all the cell phones in the world use flash
01:35:10 most of the laptops use flash all the embedded devices use flash instead of storage still in the cloud magnetic
01:35:18 disks are more economical than flash but they used both in the cloud so it's been a huge change in the storage industry
01:35:26 this the switching from primarily disk to being primarily semiconductor for the individual discs but still the raid
01:35:32 mechanism applies to those different kinds of yes the the people will still use raid ideas because it's kind of
01:35:39 what's different you know kind of interesting kind of psychologically if you think about it people have always
01:35:45 worried about the reliability of computing since the earliest days so kind of but if we're talking about
01:35:52 computation if your computer makes a mistake and the computer says the computer has worries to check and say we
01:36:00 screwed up we made a mistake what happens is that program that was running you have to redo it which is a hassle
01:36:09 for storage if you've sent important information away and it loses that information you go nuts yeah yeah this
01:36:17 is the worst I oh my god so if you have a laptop and you're not backing it up on the cloud or something like this and
01:36:24 your disk drive breaks which it can do you'll lose all that information and you just go crazy right so the importance of
01:36:31 reliability for storage is tremendously higher than the importance of reliability for computation because of
01:36:37 the consequences of it so yes so raid ideas are still very popular even with the switch of the technology although
01:36:43 you know flash drives are more reliable you know if you're not doing anything like backing it up to get some
01:36:49 redundancy so they handle it you're you're you're taking great risks you said that for you and possibly from any
01:36:58 others teaching and research don't conflict with each other as right one might suspect and in fact they kind of
01:37:04 complement each other so maybe a question I have is how is teaching helped you in your research or just in your
01:37:13 entirety as a person who both teaches and does research and just thinks and creates new ideas in this world yes I
01:37:20 think I think what happens is is when you're a college student you know there's this kind of tenure system and
01:37:26 doing research so kind of this model that you know is popular in America I think America really made it happen is
01:37:33 we can attract these really great faculty to research universities because they get to do research as well as teach
01:37:40 and that especially in fast-moving fields this means people are up-to-date and they're teaching those kind of
01:37:45 things so but when you run into a really bad professor a really bad teacher I think the students think well this guy
01:37:52 must be a great researcher because why else could he be here so is I you know I I after 40 years at Berkeley we had a
01:37:58 retirement party and I got a chance to reflect and I looked back to some things that is not my experience there's a I
01:38:07 saw a photograph of five of us in the department who won the distinguished Teaching Award from campus a very high
01:38:12 honor you know what I've got one of those when the highest honors so they're five of us on that picture
01:38:21 there's Manuel Blum Richard Karp me Randy Katz and John osterhaus contemporaries of mine I mentioned Randy
01:38:27 already all of us are in the National Academy of Engineering we've all run the distinguished Teaching Award Blum Karp
01:38:34 and I are all have turing award just going away that's right you know the highest award in computing so the
01:38:44 opposite right it's what happens if you it's it's they're highly correlated so probably the other way to think of it if
01:38:51 you're very successful people may be successful at everything they do it's not an either/or and but it's an
01:38:56 interesting question whether specifically that's probably true but specifically for teaching if there's
01:39:02 something in teaching that it's the Richard Fineman right right yeah is there something about teaching that
01:39:08 actually makes your research makes you think deeper and more outside the box and yeah absolutely so yeah I was going
01:39:15 to bring up Fineman I mean he criticized the Institute of Advanced Studies he says there's Advanced Studies was
01:39:21 this thing that was created in your Princeton where Einstein and all these smart people
01:39:25 and when he was invited he said he thought it was a terrible idea his this is a university was it was supposed to
01:39:31 be heaven right a university without any teaching but he thought it was a mistake is getting up in the classroom and
01:39:37 having to explain things to students and having them ask questions like well why is that true makes you stop and think so
01:39:45 he to think he thought and I agree I think that interaction between a retina research university and having students
01:39:51 with bright young man's asking hard questions the whole time is synergistic and you know a university without
01:40:00 teaching wouldn't be as vital and exciting a place and I think it helps stimulate the the research another
01:40:09 romanticized question but what's your favorite concept or idea to teach what inspires you or you see inspire the
01:40:17 students is there something to pasta my or or puts the fear of God in them I don't know II whichever is most
01:40:23 effective I mean in general I think people are surprised I've seen a lot of people who don't think they like teaching
01:40:31 come come give guest lectures or teach a course and get hooked on seeing the lights turn on right his people you can
01:40:37 explain something to people that they don't understand and suddenly they get something you know that's that's not
01:40:44 that's important and difficult and just seeing the lights turn on is a you know it's a real satisfaction there I don't
01:40:53 think there's any in a specific example of that it's just the general joy of seeing them seeing them understand I
01:41:01 have to talk about this because I've wrestled I do usual arts yes yes I love Russ I'm a huge I'm Russian so I'll sure
01:41:10 I'd have talked to Dan Gable oh yeah I guess so fine yang Gables my era kind of guy so you wrestled UCLA among many
01:41:19 other things you've done in your life competitively in sports and science on you've wrestled maybe again continue in
01:41:28 their immense sessions but what have you learned about life yeah and maybe even size from wrestling or from that's in
01:41:36 fact I wrestled at UCLA but also at El Camino can be College and just right now we were in
01:41:42 the state of California we were state champions at El Camino and the fact I was talking to my mom and I got into
01:41:49 UCLA but I decided to go to the Community College which is it's much he's harder to go to UCLA than Community
01:41:55 College and I asked why did I make the decision because I thought that was because of my girlfriend she said well
01:41:59 it was the girlfriend and and you thought the wrestling team was really good and we were right we had a great
01:42:06 wrestling team it we actually wrestled against UCLA at a tournament and we beat UCLA it's a community college which just
01:42:15 freshmen and sophomores and the reason I brought this up is I'm gonna go they've invited me back at El Camino if give a
01:42:24 lecture next month and so I'm Liev my friend who was on the wrestling team that we're still together we're right
01:42:30 now reaching out to other members of the wrestling team you can get together every Union but in terms of me it was a
01:42:36 huge difference I was I was both I was kind of the age cutoff I was who's December first and so
01:42:43 I was almost always the youngest person in my class and I matured later on you know our family badgered later so I was
01:42:51 almost always the smallest guy so you know I took in kind of nerdy courses but I was wrestling so wrestling was huge
01:43:01 for my you know self-confidence in high school and then you know I kind of got bigger at El Camino and in college and
01:43:09 so I had this kind of physical self-confidence and it's translated into research self-confidence and and also
01:43:21 kind of I've had this feeling even today in my 70s you know if something if something going on and streets there's
01:43:29 bad physically I'm not gonna ignore it right I'm gonna stand up and try and straighten that out and that kind of
01:43:34 confidence just carries through the entirety of your life yeah and the same things happens intellectually if there's
01:43:39 something going on where people are saying something that's not true I feel it's my job to stand up and just like I
01:43:45 would in the street if there's something going on somebody attacking some woman or something I'm not I'm not standing by
01:43:50 and letting that so I feel it's my job to stand up so it's kind of ironically translates the
01:43:57 other things that turned out for both I had really great college in high school coaches and they believed even though
01:44:05 wrestling's an individual sport that would be be more successful as a team if we bonded together you do things that we
01:44:11 would support each other rather than everybody you know in wrestling it's one-on-one and you could be everybody's
01:44:16 on their own but he felt if we bonded as a team we'd succeed so I kind of picked up those skills of how to form
01:44:23 successful teams and how do you from wrestling and so I think one of most people would say one of my strengths is
01:44:31 I can create teams of faculty watch teams of faculty grad students pull all together for a common goal and you know
01:44:38 and you often be successful at it but I got I got both of those things from wrestling also I think I heard this line
01:44:46 about if people are in kind of you know collision you know sports with physical contact like wrestling or football and
01:44:52 stuff like that people are a little bit more you know assertive or something so I think I think that also comes through
01:45:01 is you know in I was I didn't shy away from the risk debates you know I was yeah I enjoyed taking on the arguments
01:45:08 and stuff like that so it was it was a I'm really glad I did wrestling I think it was really good for my self-image and
01:45:14 I learned a lot from it so I think that's you know sports done well you know there's really lots of positives
01:45:22 you can take about it leadership you know how to how to form teams and how to be successful so we've talked about
01:45:29 metrics a lot there's a really cool in terms of bench press and weightlifting pioneers metric do you develop that we
01:45:35 don't have time to talk about but it's it's a really cool that people should look into
01:45:38 it's rethinking the way we think about metrics and weightlifting but let me talk about metrics more broadly since
01:45:46 that appeals Cu in all forms let's look at the most ridiculous the biggest question of the meaning of life if you
01:45:52 were to try to put metrics on a life well-lived what would those metrics be yeah a friend Randy Katz said this he
01:46:03 said you know when when it's time to sign off it's it's the measure isn't the number of
01:46:08 zeros in your bank account it's the number of inches in the obituary in The New York Times he said it I I think you
01:46:18 know having and you know this is a cliche is that people don't die wishing they'd spent more time in the office
01:46:26 right is I reflect upon my career there have been you know a half a dozen or a dozen things say I've been proud of a
01:46:33 lot of them aren't papers or scientific well certainly my family my wife we've been married more than 50 years kids and
01:46:42 grandkids that's really precious education thinks I've done I'm very proud of you know books and courses I
01:46:50 did some help with underrepresented groups that was effective so it was interesting just seeing what were the
01:46:56 things I reflected you know I had hundreds of papers but some of them weren't the papers like the risk and
01:47:02 rate stuff wasn't proud of but a lot of them were or not those things so people who are just spend their lives you know
01:47:10 going after the dollars are going after all the papers in the world you know that's probably not the things that are
01:47:16 afterwards you're gonna care about when I was a yeah just when I got the offer from Berkeley but before I showed up I
01:47:23 read a book where they interviewed a lot of people in all walks of life and what I got out of that book was the people
01:47:28 who felt good about what they did was the people who affected people as opposed to things that were more
01:47:34 transitory so I came into this job assuming that it wasn't going to be the papers it was gonna be relationships
01:47:39 with the people over time that I would I would value and that was a correct assessment right it's it's the people
01:47:46 you work with the people you can influence the people you can help is the things that you feel good about towards
01:47:51 into your career it's not not the the stuff that's more transitory I don't think there's a better way to end it
01:47:58 then talking about your family the the over 50 years of being married to your childhood sweetheart is how do when you
01:48:06 tell people you've been married 50 years they want to know why how why I can tell you the nine magic words that you need
01:48:14 to say to your partner to keep a good relationship in the nine magic words are was wrong you were right I love you okay
01:48:23 and you got to say all nine you can't say I was wrong you were right you're a jerk you know you guess so yeah a freely
01:48:29 acknowledging that you made a mistake the other person was right and that you love them really gets over a lot of
01:48:37 bumps in the road so that's what I pass along beautifully put David is a huge honor thank you so much for the book
01:48:43 you've written for the research you've done for changing the world thank you for talking to that oh thanks for the interview
01:48:49 thanks for listening to this conversation with David Patterson and thank you to our sponsors the Jordan
01:48:56 Harbinger show and cash app please consider supporting this podcast by going to Jordan Harbinger complex and
01:49:04 downloading cash app and using colex podcast click the links buy the stuff it's the best way to support this
01:49:12 podcast and the journey I'm on if you enjoy this thing subscribe on youtube review it with five stars in a podcast
01:49:18 supported on patreon or connect with me on Twitter and lex Freedman spelled without the e try to figure out how to
01:49:28 do that it's just fr ID ma n and now let me leave you with some words from Henry David Thoreau our life is frittered away
