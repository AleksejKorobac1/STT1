00:00:01 the following is a conversation with james gosling the founder and lead designer behind the java programming language
00:00:08 which in many indices is the most popular programming language in the world or is always at least in the top two or three
00:00:15 we only had a limited time for this conversation but i'm sure we'll talk again several times in this podcast
00:00:21 quick summary of the sponsors public goods betterhelp and expressvpn please check out these
00:00:26 sponsors in the description to get a discount and to support this podcast as a side note let me say that java is
00:00:33 the language with which i first learned object oriented programming
00:00:38 and with it the art and science of software engineering also early on in my undergraduate
00:00:43 education i took a course on concurrent programming with java looking back at that time before i fell
00:00:51 in love with neural networks the art of parallel computing was both algorithmically and philosophically fascinating to me
00:01:00 the concept of a computer in my mind before then was something that does one thing at a time
00:01:06 the idea that we could create an abstraction of parallelism where you could do many things at the same time
00:01:11 while still guaranteeing stability and correctness was beautiful while some folks in college took drugs
00:01:18 to expand their mind i took concurrent programming if you enjoy this thing subscribe on youtube
00:01:24 review it with five stars on apple podcast follow on spotify support on patreon or connect with me on
00:01:31 twitter at lex friedman as usual i'll do a few minutes of ads now and no ads in the middle
00:01:36 i try to make these interesting but i do give you timestamps so go ahead and skip but please do check
00:01:41 out the sponsors by clicking the links in the description it's the best way to support this podcast
00:01:49 this show sponsored by public goods the one-stop shop for affordable sustainable healthy household products i take their fish oil
00:01:57 and use their toothbrush for example their products often have a minimalist black and white design that i
00:02:03 find to be just beautiful some people ask why i wear this black suit and tie
00:02:09 there's a simplicity to it that to me focuses my mind on the most important bits of every
00:02:14 moment of every day pulling only at the thread of the essential in all that life has to throw
00:02:20 at me it's not about how i look it's about how i feel that's what design is to me
00:02:26 creating an inner conscious experience not an external look anyway public goods plants one tree for
00:02:33 every order placed which is kind of cool visit publicgoods.com lex or use codelex at checkout to get 15
00:02:42 bucks off your first order this show is also sponsored by better help spelled h-e-l-p
00:02:50 help check it out at betterhelp.com lex they figure out what you need and match you with a licensed professional
00:02:56 therapist in under 48 hours i chat with the person on there and enjoy it
00:03:02 of course i also regularly talk to david goggins these days who is definitely not a licensed
00:03:06 professional therapist but he does help me meet his and my demons and become comfortable to exist in their presence
00:03:17 everyone is different but for me i think suffering is essential for creation but you can suffer beautifully in a way
00:03:23 that doesn't destroy you i think therapy can help in whatever form that therapy takes
00:03:28 and i do think that better help is an option worth trying they're easy private affordable and
00:03:34 available worldwide you can communicate by text anytime and schedule weekly audio and video sessions
00:03:43 check it out at betterhelp.com lex this show is also sponsored by expressvpn you can use it to unlock
00:03:49 movies and shows that are only available in other countries i did this recently with star trek
00:03:54 discovery and uk netflix mostly because i wonder what it's like to live in london
00:04:00 i'm thinking of moving from boston to a place where i can build the business i've always dreamed of building london
00:04:06 is probably not in the top three but top ten for sure the number one choice currently
00:04:12 is austin for many reasons that i'll probably speak to another time san francisco unfortunately dropped off
00:04:19 from the number one spot but is still in the running if you have advice let me know anyway
00:04:24 check out expressvpn it lets you change your location to almost 100 countries and it's super fast
00:04:32 go to expressvpn.com lexbod to get an extra three months of expressvpn for free that's expressvpn.com lex
00:04:42 pod and now here's my conversation with james gosling i've read somewhere that the square root of two is your
00:04:49 favorite irrational number i have no idea where that got started is there any truth to it is there
00:04:57 anything in mathematics or numbers that you find beautiful oh well there's lots of things in in
00:05:02 math that's really beautiful you know i i used to consider myself really good at
00:05:10 math and these days i consider myself really bad at math i never had really had a thing for the
00:05:16 square root of two but when i was a teenager there was this book called the the
00:05:25 dictionary of curious and interesting numbers which for some reason i read through and damn near memorized the
00:05:37 whole thing and i started this weird habit of when i was like filling out
00:05:47 checks you know or you know paying for things with credit cards i would want to make the the receipt add
00:05:55 up to an interesting number is there some numbers that stuck with you that just kind of make you feel good
00:06:02 they all have a story and fortunately i've actually mostly forgotten all of them
00:06:10 are they  so like 42  well yeah i mean that one 42 is pretty magical
00:06:16 and then the irrationals i mean but is there a square root or two story in there somewhere well it's
00:06:24 it's like the only number that has destroyed a religion in which way well the the
00:06:32 pathagorians they they believed that all numbers were perfect and you could represent anything as as a as a rational number
00:06:40 and in that in that time period the this proof came out
00:06:54 that there was no you know rational fraction whose value was equal to the square root of two
00:07:03 and that that means nothing in this world is perfect not even mathematics well it it means that your definition of
00:07:11 perfect was imperfect well then then there's the ghetto and completeness theorems in the 20th
00:07:16 century that ruined it once again for everybody yeah although although although you know the lesson i take from girdle's
00:07:28 theorem is not that you know there are things you can't know which is fundamentally what it says um
00:07:38 but you know people want black and white answers they want true or false but if you if you allow a three-state logic
00:07:55 then then life's good i feel like there's a parallel to  modern political discourse in there somewhere
00:08:02 but yeah let me let me ask so with your kind of early love or appreciation of the beauty
00:08:11 of mathematics do you see a parallel between that world and the world of programming you know
00:08:19 programming is all about logical structure understanding the the patterns
00:08:30 that come out of computation understanding sort of i mean it's often
00:08:39 like you know the path through the graph of possibilities to find a short a short route
00:08:48 meaning like  find a short program that gets the job done yeah kind of thing but  so then on the
00:08:54 topic of irrational numbers do you see dc programming you just painted it so cleanly  it's a
00:09:02 little this trajectory to find like a nice little program but do you see it as fundamentally messy
00:09:11 maybe unlike mathematics i don't think of it as i mean i mean you know you watch
00:09:16 somebody who's good at math do math and you know often it's it's fairly messy sometimes it's
00:09:24 kind of magical when i was a grad student
00:09:33 one of the students his name was jim sax was he had this this this this this reputation of being sort of a
00:09:47 walking talking human  theorem proving machine and if you were having a hard problem with something you could just like
00:09:54 accost him in the hall and say jim and and he would do this this this funny
00:10:00 thing where he would stand up straight his eyes would kind of defocus he'd
00:10:06 go  you know just just like get you know like like and then you straighten up and say and
00:10:19 and and and you go well okay so n log n is the answer how did he by which time he's you know down the
00:10:27 hallway somewhere yeah it is just the the oracle the black box just gives you the answer
00:10:32 yeah and then you have to figure out the path from the question to the answer i think in one of the videos i watched
00:10:39 you mentioned  don knuth  well at least recommending his  you know
00:10:45 his his book is something people should read oh yeah but in terms of
00:10:53 you know theoretical computer science do you do you see something beautiful in in that has been inspiring to you speaking
00:11:00 of n log n in your work on programming languages that's in the in that whole world of
00:11:08 algorithms and complexity and you know these kinds of more formal mathematical things
00:11:15 or did that not really stick with you in your programming life it did stick pretty clearly for me because
00:11:27 one of the things that i care about is sort of look at a piece of code and and be able to prove to myself that it works
00:11:43 you know and you know so so for example i find that i'm i'm at odds with many of the people
00:11:54 around me over issues about like how you lay out a piece of software
00:12:06 right you know so so software engineers get really cranky about how they format their the
00:12:11 documents that are the programs you know where they put new lines and where they put you know the braces
00:12:17 the braces and all the rest of that right and i tend to go to minimize the white space yeah well
00:12:35 to maximize the amount that i can see at once right so i like to be able to see a whole function and to understand what
00:12:42 it does rather than have to go scroll scroll scroll and remember right yeah
00:12:48 i'm with you on that yeah that's and people don't like that yeah i've i've had i've had you know
00:12:57 multiple times when engineering teams have  staged what was effectively an intervention
00:13:09 you know where they they invite me to a meeting and everybody's arrived before me and they so all look at me and say
00:13:20 james about your coding style i'm sort of an odd person to be programming because i don't think
00:13:31 very well verbally i am just naturally a slow reader i'm what most people would call
00:13:42 a visual thinker so when you think about a program what do you what do you see i see pictures right so
00:13:50 when i look at a piece of code on a piece of paper it very quickly gets transformed into a picture
00:14:00 and you know it's almost like a piece of machinery with you know this connected to that and like
00:14:06 these gear knobs yeah yeah i i see them more more like that than i see the the
00:14:16 the sort of verbal structure or the lexical structure of of letters so then when you look at the
00:14:20 program that's why you want to see it all in the same place then you could just map
00:14:24 it to something visual yeah and just kind of like like it leaps off the page at me and
00:14:30 yeah what are the inputs where the outputs what the heck is this thing doing yeah
00:14:35 and yeah getting a whole vision of it can we  go back into your memory memory
00:14:43 long-term memory access what's the first program oh i have no idea what the first one was i mean i i know the first machine that i
00:14:58 learned that i learned to program on what is it was a pdp-8 at the university of calgary
00:15:09 do you remember the specs oh yeah so so the thing had 4k of ram nice 12-bit words
00:15:21 the clock rate was it was about a third of a megahertz oh so i didn't even get to the to the m
00:15:30 okay yeah yeah so you know we're we're like 10 000 times faster these days
00:15:40 and was this kind of like a super computer like a serious computer for no the pdp 8i was the
00:15:47 the first thing that people were calling like mini computer got it they were sort of inexpensive enough
00:15:56 that a university lab could maybe afford to buy one and was there time sharing all that kind
00:16:03 of stuff there there actually was a time sharing os for that but it wasn't
00:16:11 used really widely the machine that i learned on was one that was kind of hidden in the
00:16:17 back corner of the of the computer center and it was
00:16:28 it was bought as a as part of a project to do computer networking but
00:16:38 you know they didn't actually use it very much it was mostly just kind of sitting there
00:16:45 and it was kind of sitting there and i noticed it was just kind of sitting there and
00:16:51 so i started fooling around with it and nobody seemed to mind so i just kept doing that and
00:16:58 i had a keyboard and like a monitor oh this is way before monitors were common so it was it was literally a a model 33 teletype
00:17:13 okay so the user interface wasn't very good yeah yeah it was it was the first computer ever
00:17:23 built with integrated circuits but by integrated circuits i mean that they would have
00:17:29 like 10 or 12 transistors on one piece of silicon right not the 10 or 12
00:17:38 billion that machines have today so what did that i mean feel like if you remember those
00:17:46 i mean did you have kind of inklings of the the magic of exponential kind of improvement of moore's law
00:17:55 of the potential of the future that was at your fingertips kind of thing oh it was just a cool yeah it was just a toy
00:18:02 you know i had always liked building stuff but one of the problems with building stuff is that you need to have
00:18:10 parts you know you need to have pieces of wood or wire or switches or stuff like that and those
00:18:16 all cost money and here you could build you could build arbitrarily complicated things
00:18:24 and i didn't need any physical materials it required no money that's right it's a good way to put
00:18:31 programming you're right it's  if you love building things it  okay so it you know completely accessible
00:18:39 you don't need anything and anybody from anywhere could just build something really cool
00:18:44 yeah yeah if you've got access to a computer you can you can build all kinds of crazy stuff
00:18:57 you know and when you were somebody like me who had like really no money and i mean i
00:19:08 i remember just lusting after being able to buy like you know and when i would do
00:19:20 sort of electronics kind of projects they were mostly made done by like dumpster diving for trash
00:19:29 you know and you know one of my big hauls was  discarded relay racks from the back
00:19:35 of a the phone company switching center oh nice that was the big memorable treasure oh
00:19:42 yeah yeah that was what do you use that for i i nice out of relays of course the thing
00:19:54 that was really hard was that all the relays required a specific voltage
00:20:02 but getting a power supply that will would do that voltage was pretty hard and since i had a bunch of trashed
00:20:12 television sets i had to sort of cobble together something that was
00:20:21 wrong but worked so i was actually running these relays and and none of the electrical
00:20:30 connections were like properly sealed off you survived that period of your life oh
00:20:38 for so many reasons for so many reasons i mean you know you're you know it's pretty common for teenage
00:20:45 geeks to discover oh thermite that's real easy to make yeah well i'm glad you did but do you
00:20:54 remember the do you remember what program in calgary that you wrote anything that stands out
00:21:03 and what language well so mostly the anything of any size was
00:21:17 and actually before i learned assembly code there was this programming language on the pdp called
00:21:22 focal five and focal five was kind of like a really stripped down
00:21:29 fortran and i remember playing but you know building programs that did things like
00:21:37 play blackjack or solitaire or for some reason or the things that
00:21:46 i really liked were ones where they were just like plotting graphs so something with
00:21:54  like a function or a data and then you'd plot it yeah yeah i did a bunches of those
00:21:59 things and went ooh pretty pictures and so this would like print out again no
00:22:09 no monitors right so it was like on a teletype yeah so using something that's kind of like a
00:22:20 a typewriter and then using those to plot functions so when i apologize to romanticize things
00:22:30 but when did you first fall in love with programming you know what was the first programming language like it's a serious
00:22:36 maybe software engineer where you thought this is a beautiful thing i guess i never really thought of
00:22:44 any particular language as being like beautiful because it was never really about the language for me it was about
00:22:51 what you could do with it and you know even today you know people try to get me into
00:22:57 arguments about particular forms of syntax for this or that and i'm like
00:23:04 who cares you know it's it's about what you can do not not not how you spell the word
00:23:12 and you know so back in those days i i learned like pl one and fortran and cobalt and and you know by the time that
00:23:23 people were willing to hire me to do stuff you know it was mostly assembly code and you know pvp assembly code and and
00:23:36 control data assembly code for like the cdc 6400 which was an early i guess super computer
00:23:45 even though that super computer has less compute power than my phone by a lot and that was mostly
00:23:54 like said fortran yeah world that said you've also showed appreciation for the greatest language
00:24:02 ever that i think everyone agrees is lisp well lisp was definitely on my list of the greatest ones that have have um
00:24:14 existed is that number one or i mean are you i mean you know that you know the thing is that it's it that you you know
00:24:23 i wouldn't put it number one now is it the parentheses what  what do you love what do you not love
00:24:31 about lisp well i guess the number one thing to not love about it is so freaking many
00:24:41 parentheses yeah on the on the love thing is you know out of those tons of parentheses you actually get an
00:24:51 interesting language structure and i've always thought that there was a friendlier version of lisp
00:24:58 hiding out there somewhere but i've never really spent much time thinking about thinking
00:25:03 about it but you know so like like up the food chain for me then from lisp is
00:25:14 simula which a very small number of people have ever used but a lot of people i think he had a
00:25:19 huge influence right yeah the programming but in the simula i apologize if i'm wrong on this but is
00:25:26 that one of the first functional languages or no no it was it was it was the first object-oriented programming language
00:25:35 got it it's really where object-oriented and languages sort of came together and it was also the
00:25:45 the language where co routines first showed up as a part of the language so you could have a programming style
00:25:53 that was you could think of it as multiple  sort of multi-threaded
00:26:00 with a lot of parallel parallelism really there's ideas of parallelism in there yeah
00:26:08 yeah so that was that was back you know so the first stimulus spec was simula 67 like 1967. yeah
00:26:19 wow so it had it it had co-routines which are almost threads the the thing about co
00:26:24 routines is that they don't have true concurrency so you can get away without really complex locking you can't
00:26:37 usably do co-routines on a on the multi-core machine or if you try to do core
00:26:43 code routines on the multi-core mute machine you don't actually get to use the multiple cores
00:26:50 either that or you you know because you start then having to get into the universe of
00:26:57 you know semaphores and locks and things like that but you know in terms of the
00:27:06 the style of programming you could write code and think think of it as being multi-threaded the mental model
00:27:17 was very much a multi-threaded one and all kinds of problems you could approach to to return to  the world of lisp for
00:27:29 a brief moment you  at cmu you've you  wrote a version of emacs that i think was very impactful on the
00:27:35 history of emacs what was your motivation for for doing so at that time
00:27:51 so that was in like 85 or 86. i had been using unix for a few years
00:28:01 and most of the editing was this this tool called edie which was sort of an ancestor of vi
00:28:13 and is it a pretty good editor not a good editor well if if what you're using if your input device is a teletype
00:28:23 it's pretty good yeah it's certainly more humane than tico which was kind of the the common thing in
00:28:32 a lot of the dec universe at the time tico is both tk is that the tico t-e-c-o the text editor and corrector corrector huh
00:28:44 so many features and the original emacs came out as so emac stands for editor macros
00:28:56 and tico had a way of writing macros and so the original emacs from mit sort of started out as
00:29:07 a collection of macros for tico but then you know you know the the sort of emac
00:29:14 style got got popular originally at at mit and then people did a few other implementations of emacs
00:29:24 that were you know the the the code base was entirely different but it was sort of the philosophical style
00:29:31 of the original emacs what was the philosophy of emacs and by the way were all the implementations always in c
00:29:38 and then no and how does lisp fit into the picture no so so the very first emacs was
00:29:45 written as a bunch of macros for the tico text editor wow this is so interesting and the
00:29:53 the the macro language for tico was probably the most ridiculously obscure format you know if you just look at a
00:30:01 tico program on a on a page you think it was just random characters it really looks like just line noise
00:30:12 just kind of like latex or something oh worse way worse than the tick way way worse than latex
00:30:20 but you know if you use tico a lot which i did the the tico was completely optimized for touch typing
00:30:31 at high speed so there were no two character commands well there were a few but mostly they
00:30:39 were just one character so every character on the keyboard was a separate command and actually every character on the
00:30:47 keyboard was usually two or three commands because you know you hit shift and control and all of those things you
00:30:53 know it's just a way of very tightly encoding it and mostly what emacs did was it made that
00:31:04 that visual right so one way to think of tico is use emax where you have to maintain a mental
00:31:18 model of you know sort of a mental image of your document you have to go
00:31:24 okay so the the cursor is between the a and the e and i want to exchange those so i do these
00:31:34 these things right so it almost it is almost exactly the emax command set well it's roughly approximate roughly
00:31:42 the same as emacs command set but using emacs with your eyes closed so what
00:31:51 emacs you know part of what emacs added to the whole thing was was being able to visually see what you
00:31:58 were editing in a form that matched your document and you know a lot of things
00:32:10 changed in the in the command set it you know because it was programmable it was
00:32:16 really flexible you could add new commands for all kinds of things and then people rewrote emacs
00:32:25 like multiple times in lisp there was one done at mit for the lisp machine there was one done
00:32:33 for multix and one summer i got a got a summer job to work on the pascal compiler for multix
00:32:42 and that was actually the first time i used emacs and and and so to write the compilers
00:32:50 you've worked in compilers too it's yeah that's fascinating yeah so i did a lot of work you know
00:32:57 i mean i spent like like a really intense three months working on this pascal compiler um
00:33:06 basically living in emacs and it was it was the one written in mac list by bernie greenberg
00:33:14 and i thought wow this is a just a way better way to do editing and then i got back to cmu
00:33:26 where we had kind of one of everything and two of a bunch of things and four of a few things and
00:33:34 since i mostly worked in the unix universe and unix didn't have an e-max i decided that i needed to fix that problem
00:33:45 so i so i wrote this this implementation of emacs in c because at the time c was really the
00:33:52 only language that worked on on  on unix and you were comfortable with c as
00:33:59 well oh yeah at that point yeah at that time i had done a lot of c coding that this was in like 86.
00:34:13 you know it was running well enough to be used for me to use it to edit itself within a
00:34:20 month or two and then it kind of took over the university and and it spread and then it died yeah and then it went
00:34:28 outside the and largely because unix kind of took over the research community
00:34:38 on the on the on the arpanet then and emacs was kind of the best editor out there it
00:34:45 kind of took over and there was a actually a brief period where i actually had login ids on every
00:35:00 you know because people would say oh can we install this and and i'd like well yeah but you'll need some help
00:35:11  the days when security wasn't  when nobody cared nobody cared yeah we can ask briefly
00:35:20 what were those early days of arpanet and the internet like what was 
00:35:27 what i mean did you  again sorry for the silly question but could you have possibly imagined
00:35:34 that  the the internet would look like what it is today you know some of it is remarkably unchanged
00:35:45 so like one of the things that i noticed really early on at you know when i was at
00:35:53 at carnegie mellon was that a lot of social life became centered around the arpanet
00:36:03 so things like you know between email and text messaging because the you know text messaging was a part of
00:36:11 the arpanet really early on there were no cell phones but you know you're sitting at a terminal and you're
00:36:16 typing stuff and essentially email or like what what is well just like
00:36:23 like a one-line message right so so so oh cool so like chat like chat yeah right so it's like like sending a
00:36:31 one-line message to somebody right and and and so pretty much everything from you know
00:36:42 arranging lunch to going out on dates you know it was all like driven by social media
00:36:51 so you know right in the in the in the 80s easier than phone calls yeah you know and my life had gotten to where
00:37:01 you know i was you know living on social media you know from like the early mid 80s
00:37:12 and and so when when it sort of transformed into the internet
00:37:18 and social media explodes i was kind of like what's the big deal it's just a scale thing it's it's right the the scale thing is just
00:37:30 astonishing yeah but the fundamentals in some ways the fundamentals have have hardly changed and
00:37:39 you know the the technologies behind the the networking have changed significantly the
00:37:47 you know the the the watershed moment of you know going from the arpanet to the internet and then people starting to just
00:37:59 scale and scale and scale i mean the the the the scaling that happened in the early 90s
00:38:07 and the way that so many vested interests fought the internet oh who oh interesting what was the oh
00:38:16 because you can't really control the internet yeah so so so fundamentally the
00:38:26 you know the cable tv companies and broadcasters and phone companies you know at the deepest fibers of their being
00:38:39 they hated the internet but you know so so so think of a cable company right most of the employees of the cable company
00:39:01 their job is getting tv shows movies whatever out to their customers they view their business
00:39:13 as serving their customers but as you climb up the hierarchy in the in the cable companies
00:39:24 that view shifts because really the business of the cable companies
00:39:34 that had always been selling eyeballs to advertisers and you know that view of of like a cable company didn't really
00:39:49 dawn on most people who worked at the cable companies but i mean you know we you know i had
00:39:55 various dust-ups with various cable companies where you could see you know in the stratified layers of
00:40:01 the corporation that that this this this this this view of you know the reason that you have you know
00:40:12 cable tv is to capture eyeballs you know there they didn't see it that way well so so the people who
00:40:18 the most the people who worked at the phone company are at the cable companies their view
00:40:24 was that their their job was getting delightful content out to their customers
00:40:31 and their customers would pay for them would pay for that higher up they viewed this as as a way of
00:40:41 attracting eyeballs to them and and then what they were really doing was selling
00:40:50 the eyeballs that were glued to their content to the advertising to the advertisers yeah and so the internet was a competition in
00:40:57 that sense right and and and and they were right well yeah i mean there was one
00:41:07 proposal that we sent the the we one detailed proposal that that we wrote up you know back at that sun
00:41:17 in the in the early 90s that was essentially like look anybody you know with it with
00:41:22 internet technologies anybody can become provider of of content so you know
00:41:33 you could be distributing home movies to your parents or your cousins or your who are anywhere
00:41:39 else right so anybody can become a publisher wow you were thinking about that already yeah
00:41:46 yeah that was like yeah that was that that was like in the in the early 90s yeah
00:41:52 and we thought this would be great you could you know and the kind of content we were thinking about at the
00:41:57 time was like you know home movies kids essays you know stuff from
00:42:09 like grocery stores or you know you know that or or a restaurant that they could actually like start sending information about
00:42:20 out and that's brilliant and and the the the the reaction of the cable companies was
00:42:30 like no because because then we're out of business what is it about companies that because
00:42:38 they could have just they could have been ahead of that wave they could have listened to that
00:42:43 and they could have they they didn't see a path to revenue you know there's there's somewhere in
00:42:49 there there's a lesson for like big companies right like to to listen to to try to anticipate the the renegade
00:42:58 the out there out of the box people like yourself in the early days writing proposals about
00:43:04 what this could possibly be well and that you know that you know it wasn't you know if you're in a in a position
00:43:11 where you're making truckloads of money off of a particular business model
00:43:20 you you know the the the the the whole thought of like you know leaping the chasm
00:43:29 right you know you know you can see oh new models that are more effective are emerging
00:43:38 right so like digital cameras versus film cameras you know i mean why take the leap
00:43:47 why take the leap because you're making so much money off of film and
00:43:57 you know in my past at sun one of our big customers was kodak and i ended up
00:44:02 interacting with folks from kodak quite a lot and they actually had a big um
00:44:10 digital camera research and you know digital imaging business or b development group
00:44:19 and they knew that that you know you you know you just look at the
00:44:26 at the trend lines and you look at you know the emerging quality of of of these you know digital cameras
00:44:36 and you know you can just plot it on the graph you know and it's like you know sure but you know
00:44:51 digital is is is is improving like this the lines are going to cross and and you know the point at which the lines cross
00:44:58 is going to be a collapse in their business and they could see that right they absolutely knew that the
00:45:09 problem is that you know up to the point where they hit the wall they were making truckloads of money yeah
00:45:25 it never started to make sense for them to kind of lead the charge and
00:45:31 part of the issues for a lot of companies for this kind of stuff is that you know if you're going to
00:45:39 leap over a chasm like that like like with kodak going from from film to digital that's a transition that's going to take
00:45:49 a while right we have we had fights like this with people over like smart carts
00:45:56 the smart cards fights were just ludicrous but that's where visionary leadership comes in right yeah somebody needs to
00:46:02 roll in and say then take to take the leap well it's it's partly take the leap but it's also
00:46:09 partly take the hit take the hit right so so so so you can draw all the graphs you want that show
00:46:18 that you know if we leap from here you know you know the you know on our present trajectory we're doing this and
00:46:22 there's a cliff if we force ourselves into it into a transition and we proactively do that
00:46:33 we can be on the next wave but there will be a period when we're in and pretty much always there ends up
00:46:46 being a trough as you leave the chasm but the way that public companies work on this planet they're reporting
00:46:57 every quarter and the one thing that a ceo must never do is take a big hit take a big hit
00:47:06 you know over some some quarter and and many of these transitions involve a big hit for a
00:47:16 a period of time you know one two three quarters and so you get some companies and you know like
00:47:27 tesla and amazon are are really good examples of companies that take huge hits but they have the luxury of being able
00:47:36 to ignore the stock market for a little while and that's not so true today really but you know in the early days of
00:47:48 of both of those companies you know like like like like like they they both did this thing of
00:47:56 you know i don't care about the quarterly reports i care about how many how many happy
00:48:01 customers we have yeah right and having as many happy customers as possible can
00:48:09 often be an enemy of the bottom line yeah so how do they make that work i mean
00:48:14 amazon operated in the negative for a long time it's like investing into the future right but you know you know so
00:48:23 amazon and google and tesla and facebook a lot of those had what it what amounted to patient money
00:48:32 often because the there's there's like a charismatic central figure who has a really large
00:48:41 block of stock and they can just make it so so what  on that topic just maybe it's
00:48:50 a little small tangent but  you've gotten the chance to work with some pretty big leaders
00:48:55 what are your thoughts about on tesla side elon musk leadership on the amazon side jeff bezos
00:49:02 all of these folks with large amounts of stock and vision in their company i mean they're founders
00:49:08 yeah either the complete founders are like early on folks and  they're they amazon have taken
00:49:17 leave a lot of leaps  and you know  that probably at the time people would criticize
00:49:24 as like what is this bookstore thing why yeah and and you know bezos had a vision and
00:49:36 he had the ability to just follow it lots of people have visions and you know the average vision is completely idiotic
00:49:43 and you crash and burn you know the the silicon valley crash and burn rate is pretty high
00:49:53 and they're not they don't necessarily crash and burn because they were dumb ideas but
00:49:59 you know often it's it's just timing timing and luck and you know you take companies like
00:50:07 like like tesla and and and and and really you know the the original tesla
00:50:15 you know sort of pre elon was kind of doing sort of okay
00:50:26 but but but he just drove them and because he had a really strong vision you know he would
00:50:34 he would make calls that were always you know or well mostly pretty good i mean the model
00:50:44 x was kind of a goofball thing to do but he did it boldly anyway like there's so many people
00:50:50 that just said like there's so many people that oppose them on the falcon one door like the doors yeah
00:50:55 from the engineering perspective those doors are ridiculous it's like yeah they're they are a complete travesty
00:51:03 but but they're but they're exactly the symbol of what great leadership is which is like you have a vision and you just go like
00:51:10 if you're gonna do something stupid make it really stupid yeah and go all in yeah yeah and and
00:51:20 you know to to must credit he's a really sharp guy so going back in time a little bit to steve jobs
00:51:28 you know steve jobs was a similar sort of character who had a strong vision and was really really smart
00:51:35 and you you know and he wasn't smart about the technology parts of things but but sort of he he was really sharp about
00:51:45 the the the sort of human relationship between you know the relationship between humans and objects
00:51:56 and but he was a jerk you know right can we just linger on that a
00:52:05 little bit like people say he's a jerk is that a feature or a bug well that's that's that's the question right
00:52:13 so you take people like steve who was really hard on people and and the
00:52:23 and so the question is was he really was he needlessly hard on people or was he just making people
00:52:32 reach to to meet his vision and you could kind of spin it either way
00:52:43 well the results tell a story you know he's  he through whatever jerk ways he had
00:52:49 he made people often do the best work of their life yeah yeah and that was absolutely true
00:52:56 and you know i interviewed with him several times i did you know various
00:53:06 negotiations with him and even though kind of personally i liked him i could never
00:53:18 work for him why do you think  it that what can you put into words the kind of
00:53:27 tension that you feel would be destructive as opposed to constructive oh he he he'd yell at people he'd call
00:53:39 them names and you don't like that no no i don't i don't think you need to do that
00:53:53 you know he you know i think you know there's there's and then there's too far and i think he
00:54:04 was on the wrong side of the line and i've never worked for musk i know a number of people who have
00:54:12 many of them that have said and it's you know shows up in the press a lot that that musk is kind of that way and
00:54:21 one of the things that i sort of loathe about silicon valley these days is that a lot of the high-flying
00:54:30 successes are run by people who are complete jerks but it seems like there's been
00:54:38 become this there's come this this sort of mythology out of steve jobs that the reason that
00:54:44 he succeeded was because he was super hard on people and and and and and and and in
00:54:57 a number of corners people start going oh if i want to succeed i need to be a real jerk yeah right
00:55:04 and and and that for me just does not compute i mean i know a lot of successful people who are not jerks
00:55:13 who are perfectly fine people you know they they tend to not be in the public eye the the
00:55:24 the the general public somehow lifts the jerks up into the into the hero status right well they
00:55:30 because they're they do things that get them in the press yeah and you know the people who
00:55:40 you know don't do the kind of things that spill into the press
00:55:50 yeah i just  talked to chris ladner for the second time he's a super nice guy just an example of
00:55:59 this kind of kind individual that's in the background i feel like he's behind like a million
00:56:04 technologies but he also talked about the jerkiness of some of the folks yeah yeah and the fact that being a jerk has
00:56:13 become your required style but one thing i'd maybe want to ask on that is and maybe to push back a little bit
00:56:19 so there's the jerk side but there's also if i were to criticize what i've seen in silicon valley
00:56:25 which is almost the resistance to working hard it's it's so posted jobs and elon kind
00:56:38 of push people to work really hard to do and there's a question whether it's
00:56:45 possible to do that nicely but one of the things that bothers me maybe i'm just
00:56:51 rushing and just kind of you know romanticize the whole suffering thing but i think working hard is essential
00:56:58 for accomplishing anything interesting like really hard and in the parlance of silicon valley it's probably too hard
00:57:06 this idea that you should work smart not hard often to me it sounds like you should be lazy because of course you want to be to work
00:57:16 smart of course you want to be maximally efficient but in order to discover the efficient path like we're
00:57:21 talking about with the short programs yeah well you know the the the smart hard thing yeah isn't an either or it's
00:57:29 an and as an and yeah right and you know the the the
00:57:39 the the people who say you should work smart not hard they pretty much always fail yeah thank you right i mean that's
00:57:49 that's that's just just a recipe for disaster i mean there are there are counter examples
00:57:56 but they're more people who benefited from luck and you're yeah exactly luck and timing like you said is often 
00:58:05 an essential thing but you're saying you know you can be you can push people to work hard
00:58:11 and do incredible work without without  without being nasty yeah without being nasty
00:58:18 i think  google is a good example of the leadership of google
00:58:24 throughout his history has been a pretty good example of  not being nasty i mean the
00:58:34 the the the twins larry and sergey are both pretty nice people sandra paches very nice yeah yeah yeah and
00:58:45 you know it's it's a culture of people who work really really hard let me ask a maybe a little bit of a
00:58:54 tense question  we're talking about emacs it seems like you've done some incredible work so outside of java
00:59:01 you've done some incredible work that didn't become as popular as it could have because of like licensing issues and
00:59:08 open sourcing  what are your thoughts about the the the entire mess like what's about open
00:59:23 source now in retrospect looking back  about licensing about open sourcing do you think  open source is a good thing
00:59:35 a bad thing do you have regrets do you have wisdom that you've learned from that whole experience
00:59:43 so in general i'm a big fan of of open source the way that it it can be used to build communities and promote the development of things
00:59:53 and promote collaboration and all of that is really pretty grand when
01:00:03 open source turns into a religion that says all things must be open source right i get kind of
01:00:11 weird about that because it's it's sort of like saying you know some some versions of that um
01:00:21 end up saying that that that all all software engineers must take a vow of poverty
01:00:27 right right as though it's unethical to have money yeah to build a company to  right
01:00:37 and you know there's a there's a there's slice of me that actually kind of buys into that right
01:00:45 because you know people who make billions of dollars off of like a patent and the the patent came from like you
01:00:54 know literally a a stroke of lightning that that hits you as you lie half a week in bed
01:01:05 yeah that's lucky good for you the way that that sometimes sort of explodes into
01:01:12 something that looks to me a lot like exploitation you know you see a lot of that in in in like the
01:01:21 the drug industry you know when you know when you've got a got got medications that cost
01:01:30 you know cost you like a hundred dollars a day and it's like no
01:01:39 yeah so the the interesting thing about the sort of open source  what bothers me is when
01:01:47 something is not open source and because of that it's a worse product yeah
01:01:54 so like i mean if i look at your just implementation of emacs like that could have been the dominant
01:02:00 implementation like i use emacs that's my main id i apologize to the world but i still
01:02:04 love it  and you know i could have been using your implementation of emacs and why
01:02:13 aren't i so are you using the gnu max i guess the default on linux is that new yeah
01:02:22 and and that through a strange passage started out as the one that i wrote exactly so it's it still has 
01:02:29 right yeah right well and and part of that was because you know in you know the last
01:02:39 couple of years of grad school it it became really clear to me that i was either going to be mr emax forever
01:02:56 i couldn't actually do both was that a hard decision that's so interesting to think about
01:03:01 you as the pub like it's a different trajectory that could have happened yeah that's fascinating um
01:03:08 you know and maybe you know i could be fabulously wealthy today if i had become mr emax and emacs had mushroomed into
01:03:18 a series of text processing applications and all kinds of stuff and you know i would have
01:03:29 i have a long history of financially suboptimal decisions because i didn't want that life
01:03:42 right and you know i went to grad school because i wanted to graduate you know you know being mr emax for a while
01:03:59 was kind of fun and then it kind of became not fun not fun and you know when it was not fun
01:04:10 and i was you know there was no way i could you know pay my rent right yeah and and i was like
01:04:21 okay do i carry on as a grad student as you know i you know i had a research assistantship and i was sort of living
01:04:27 off of that and i was trying to do my  you know i was doing all my
01:04:34 ra where all of my r.a you know being grad student work and being mr emacs all at the same time
01:04:42 and and i i decided to pick one and one of the things that i did at the
01:04:48 time was i went around you know all the people i knew on the
01:04:55 the arpanet who might be able to to to take over looking after emacs and pretty much everybody said
01:05:08 i got a day job so so i actually found you know two folks and a couple of folks in a garage in new jersey
01:05:18 complete with a dog who are willing to take it over but they were going to have to charge
01:05:26 money but my deal with them was that they would um
01:05:32 only that they would make it free for universities and schools and stuff and they said sure and
01:05:41 you know that upset some people so you have some now i don't know the full history of
01:05:45 this but i think it's kind of  interesting you have some tension with me mr richard stallman
01:05:55 over the and he kind of represents this kind of like like you mentioned free software 
01:06:06 sort of a dogmatic focus on yeah all all information must be free must be free so what is there an
01:06:16 interesting way to  paint a picture of the disagreement you have with richard through the years
01:06:24 my my basic opposition is that you know when you say information must be free
01:06:32  to a really extreme form that turns into you know all people whose job is the production of
01:06:48 everything from movies to software they must all take a vow of poverty because information must be free
01:06:59 and that doesn't work for me right and and i and i don't i don't want to be wildly rich i am not
01:07:07 wildly rich but i do actually you know you know i've
01:07:21 you know i can feed my children yeah i totally agree with you i it does just make me sad that sometimes
01:07:27 the closing of the source for some reason the people that like a bureaucracy begins to build and
01:07:36 sometimes it doesn't it hurts the product oh absolutely absolutely it's always sad
01:07:41 and there's and there is a there is a balance in there that's a balance and
01:07:51 you know it's it's not hard hard over you know rapacious capitalism and and it's and it's not hard over in
01:08:01 the other direction and you know a lot of the the open source movement they
01:08:12 they have been magic to find a path to actually making money right so doing things like service and support
01:08:20 works for a lot of people you know and there are some some ways where
01:08:34 some of them are are a little a little perverse right so as you know a part of things like this
01:08:44 sarbanes-oxley act and various people's interpretations of all kinds of accounting principles
01:08:51 and this is kind of a worldwide thing but if you've got a a corporation that is depending on some piece of software
01:09:02 you know the often you know various accounting and reporting standards say if you don't
01:09:07 have a support contract on this thing that that your business is depending on
01:09:15 then that's bad you know so so so you know if you've got a if you've got a database you need to
01:09:24 pay for support and and so but there's a difference between you know the the sort of support
01:09:31 contracts that you know the average open source database  producer charges and
01:09:42 what somebody who is truly rapacious like oracle charges it's a it's a it's a balance it is it is absolutely a balance and
01:09:54 you know there are there are a lot of a lot of different ways to make you know the math work workout
01:10:05 for everybody and you know the the very you know
01:10:15  un unbalanced sort of you know like like the winner takes all thing that that happens in so much of
01:10:23 of modern commerce that just doesn't work for me either i know you've talked about this
01:10:32 in quite a few places but you have created one of the most popular programming languages in the world
01:10:40 this is the programming language that i first learned about object-oriented programming with
01:10:48 you know i think it's a programming language that a lot of people use in a lot of
01:10:53 different places and millions of devices today java so the absurd question but can you tell the origin
01:11:03 story of java so long time ago at sun in about 1990 there was a
01:11:11 group of us who were kind of worried that there was stuff going on
01:11:18 in the universe of computing that the and so a a few of us started this project at sun that really
01:11:33 got going i mean we started talking about it in 1990 and it really got going you know what was happening in terms of
01:11:47 you know computing hardware you know processors and networking and all of that that was
01:11:54 outside of the computer industry and that was everything from the the
01:12:00 the the sort of early glimmers of cell phones that were happening then to you know you look at elevators and
01:12:09 locomotives and process control systems in factories and all kinds of audio audio
01:12:20 equipment and video equipment they all had processors in them and they were all doing stuff with them
01:12:28 and and it and it sort of felt like there was something going on there that and so c c and c plus plus was in the air
01:12:40 already oh no c and c plus plus absolutely owned the universe at that time everything was written in c and z plus
01:12:46 plus so where was the hunch that there was a need for a revolution well so the the need for a revolution
01:12:51 was not about the a language it was about it was just as simple and vague as
01:13:03 there are things happening out there and we understand them we need to understand them
01:13:10 and and so a few of us went on several somewhat epic road trips
01:13:21 literal road trips literal road trips it's like get on an airplane go to japan visit you know
01:13:31 toshiba and sharp and mitsubishi and sony and all of these folks and you know because we worked for sun we
01:13:38 had you know folks who were willing to like give us introductions you know we we visited you know
01:13:48 samsung and you know a bunch of korean companies and we went all over europe we went to you know
01:13:55 places like like phillips and siemens and thompson and what did you see there
01:14:01 you know for me the one of the things that sort of left out was that they were doing all the usual computer
01:14:08 computer things that people had been doing like 20 years before the thing that really left out to me was
01:14:15 that they were sort of reinventing computer networking and they were making
01:14:25 all the mistakes that people in the computer industry had had made and since i had been doing
01:14:31 a lot of work in in the networking area you know you know we'd go and
01:14:37 you know visit you know company x they'd describe this networking thing that they were doing
01:14:42 and just without any thought i could i could tell them like the 25 things there were going to be complete
01:14:49 disasters with that thing that they were doing and i don't know whether that had any impact on any of them but but
01:14:59 but that particular story of you know sort of repeating the disasters of the computer science industry um
01:15:08 was there and we and one of the things we thought was well maybe we could do something useful
01:15:14 here with like bringing them forward somewhat but but also at the same time we learned a bunch of things
01:15:27 from from these you know mostly consumer and you know high on the list was that they viewed their
01:15:42 like relationship with the customer as sacred they they were never ever willing to make
01:15:58 for safety right so one of the things that had always made me nervous in the computer industry
01:16:07 was that people were willing to make trade-offs in reliability
01:16:15 to get performance you know the the you know they want faster faster it breaks a little more often
01:16:21 because it's fast you know you maybe you run it a little hotter than you should or like like the one that always blew my
01:16:29 mind was the way that the folks at at cray super computers got their division to be really fast
01:16:41 was that they did newton-raphson approximations and so you know the bottom several bits of you know a over b we're essentially
01:16:54 random numbers what could possibly go wrong what could go wrong
01:17:03 right and you know just figuring out how to nail the bottom bit how to make sure that you know
01:17:14 if you put a piece of toast in a toaster it's not going to kill the customer it's not going to burst into flames and
01:17:22 burn the house down so those are i guess those are the the principles that were inspiring
01:17:30 but how did from the days of  java is called oak because of a tree outside the window story that
01:17:38 people know how did it become this incredible like powerful language well so it was a bunch of things so we you know
01:17:50 after all that we started you know the way that we decided that we could understand things better was by
01:17:58 building a demo building a prototype of something okay so kind of because it was easy and fun we decided to build
01:18:07 a control system for some home electronics you know tv vcr that kind of stuff and
01:18:15 as we were building it we you know we we sort of discovered that there were some things
01:18:19 about standard practice in c programming that were really getting in the way and it wasn't
01:18:30 it wasn't exactly you know because we were writing this all the c code and c plus plus code that
01:18:37 that we couldn't write it to do the right thing but that one of the things that was weird in
01:18:44 the group was that we had a guy who's who's who's you know his sort of top level job
01:18:52 was he was a business guy you know he was sort of an mba kind of person you know think about business
01:18:58 plans and all of that and you know there were a bunch of things that were kind of
01:19:06 you know and we would talk about things that were going wrong and or things were going wrong things
01:19:12 were going right and you know as we thought about you know things like like the requirements for
01:19:20 security and safety some low-level details and see like naked pointers
01:19:27 yeah and you know so so back in the early 90s it was well understood
01:19:39 that you know the number one source of like security vulnerabilities is pointers was just pointers was just bugs
01:19:47 yeah right and it was like you know 50 60 70 of all security vulnerabilities were bugs and the vast
01:19:55 majority of them were like buffer overflows yeah so you're like we have to fix this we we have to make
01:20:01 sure that this cannot happen and that was kind of the original thing for me was this cannot this cannot continue
01:20:15 and one of the things i find really entertaining this year was i forget which rag published it but
01:20:24 there was this article that came out that was an examination it was sort of the result of of an
01:20:32 examination of all the security vulnerabilities in chrome and chrome is like a giant piece of c-plus plus code
01:20:42 and 60 or 70 percent of all the security vulnerabilities were stupid pointer tricks and i thought it's 30 years later
01:20:55 and we're still there still there and we're still there and you know i you know that's one of
01:21:02 those you know slap your forehead and and and just just just want to cry would you attribute
01:21:08  or is that too much of a simplification but would you attribute the creation of java to 
01:21:16 to see borders obvious problems well that i mean that was that was one of the the trigger points
01:21:23 and currency you've mentioned concurrency was a big deal and you know because when you're
01:21:31 interacting with people you know the last thing you ever want to see is is the thing like waiting and
01:21:39 you know issues about the software development process you know when faults happen can you
01:21:45 recover from them what can you do to make it easier to create and
01:21:54 eliminate complex data structures what can you do to fix you know the one of the most common
01:22:02 sea problems which is storage leaks and it's it's evil twin the the the freed
01:22:13 but still being used piece of piece of memory you know you you free something and then you keep using it
01:22:20 oh yeah you know so so when i was originally thinking about that i was thinking about it in terms of
01:22:26 of sort of safety and security issues and one of the things i sort of came to believe came to understand was that it wasn't
01:22:33 just about safety and security but it developer velocity right so and i got really religious about this
01:22:45 because at that point i had spent hunting down mystery pointer bugs and you know like like two-thirds of my time
01:23:01 as a software developer was you know because the mystery pointer bugs tend to be the hardest to find because they tend to be
01:23:12 very very statistical the ones that hurt you know they're you know they're like a one in a million chance
01:23:20 and but nevertheless create an infinite amount of suffering right
01:23:26 because when you're doing a billion operations a second yeah you know one in a million chance means
01:23:35 it's going to happen and and so i got really religious about this thing about
01:23:40 you know making it so that if something fails it fails immediately and visibly and
01:23:49 you know one of the the the things that was a a real attraction of java to
01:23:55 lots of development shops was that you know we get our code up and running twice as fast
01:24:02 you mean like the entirety of the development process the blocking all that kind of stuff yeah
01:24:07 if you you know so so if you measure time from you know you you first touch fingers to keyboard until you get
01:24:15 your first demo not much different but if you look from fingers touching keyboard to
01:24:27 solid piece of software that you could release in production it would be way faster and i think what
01:24:34 people don't often realize there's yeah there's things that really slow you down like
01:24:41 hard to catch bugs probably is is the thing that really slows down that is it really slows things down but
01:24:47 but also there were you know one of the things that you get out of object-oriented programming is a strict
01:24:53 methodology about you know what are the interfaces between things and being really clear about how parts
01:25:01 relate to each other and what that helps with is so many times what people do
01:25:11 is they kind of like sneak around the side so if you've built something and people are using it
01:25:19 and then and you say and you say well okay you know i built this thing you use it this way and then you change it
01:25:27 in such a way that that it still does what you said it does it just does it a little bit different
01:25:32 but then you find out that somebody out there was sneaking around the side they sort of tunneled in a back door
01:25:41 and this person their code broke and because they were sneaking through a side door
01:25:50 and and normally the attitude is dummy but a lot of times
01:26:02 you know you can't get away you can't you can't just slap their hand and tell them to not do that
01:26:09 right because you know it's you know some banks you know account reconciliation system
01:26:20 that that you know some developer decided oh i'm lazy you know i'll just sneak through the
01:26:26 back door because the language allows it i mean you can't even right mad at them and and so one of the things i did that that
01:26:33 on the one hand upset a bunch of people is that i made it so that you really couldn't go through back doors right so so the
01:26:40 whole point of that was to say if you need you know if the interface here
01:26:47 isn't right the wrong way to deal with that is is to go through a back door yeah
01:26:53 the right way to deal with it is to walk up to the developer of this thing and say  change the interface fix it yep
01:27:00 right and so it was kind of like a social engineering thing yeah and it's brilliant
01:27:07 and people ended up discovering that that really made a difference in terms of you know and and and a bunch of this
01:27:15 stuff you know if you're just like screwing around writing your own like you know class project scale stuff
01:27:23 a lot of stuff doesn't isn't quite so so important because you know you're you know both sides of the interface um
01:27:33 but you know when you're building you know sort of larger more complex pieces of software
01:27:39 that have a lot of people working on them and especially when they like span organizations you know having
01:27:50 having really clear having clarity about how that stuff gets structured saves your life yeah
01:27:58 and you know especially you know there's so much software that is fundamentally untestable
01:28:06 you know and you know until you do the real thing it's better to write good code in the beginning
01:28:13 as opposed to writing crappy code and then trying to fix it and yeah trying to scramble and figure out
01:28:19 and through testing figure out where the bugs are yeah it's just like it's like it's like
01:28:27 which shortcut caused that rocket to not get where it was needed to go so i think one of the most beautiful ideas
01:28:40  philosophically and technically is  of a virtual machine the java virtual machine well again apologize to romanticize
01:28:53 how did the idea of the jvm come to be how to you radical of an idea it is because it seems to me to be just
01:29:01 a really interesting idea in the history of programming so and what is it so the java virtual machine
01:29:12 you can think of it in different ways because it was carefully designed to have different
01:29:19 ways of viewing it so one view of it that most people don't really realize is there
01:29:33 view it as sort of an encoding of the abstract syntax tree in reverse polish notation
01:29:40 i don't know if that makes any sense at all i could explain it and that would blow all of our time
01:29:46 yeah but the other way to think of it and the way that it ends up being explained is that
01:29:54 it's it's like the the instruction set of an abstract machine that's designed such
01:29:59 that you can translate that abstract machine to a physical machine
01:30:07 and the reason that that's important so if you wind back to the early 90s when we were talking to all of these
01:30:15 these companies doing consumer electronics there were interesting conversations with purchasing
01:30:29 so if you look at how you know these you know these devices come together they're sheet metal and gears and
01:30:37 circuit boards and capacitors and resistors and stuff and
01:30:45 everything you buy has multiple sources right so you can buy a capacitor from here you can buy a capacitor from there
01:30:55 and you've got kind of a market so you know so that the you can actually get a decent price for
01:31:01 a capacitor but cpus were all different and all proprietary
01:31:25 you had to be an intel customer for the end of till the end of time because if you wrote a bunch of software
01:31:34 you know when you wrote software using whatever technique you wanted and c was particularly bad
01:31:43 about this because there was a lot of properties of the underlying machine that came through so if you're stuck so
01:31:50 the code you wrote you were stuck to that particular machine you were stuck to that particular machine
01:31:56 which meant that they couldn't decide you know intel is screwing us um
01:32:04 i'll start buying chips from you know bob's better chips this drove the like the purchasing people
01:32:17 that that they would they were welded into this decision and it would have they would have to
01:32:24 make this decision before the first line of software was written it's funny that you're talking about the
01:32:28 purchasing people so that's one perspective right it's a you could there's a lot of other
01:32:33 perspectives that all probably hated this idea right but from a technical aspect just like
01:32:41 the creation of an abstraction layer that's  agnostic to the underlying machine from the perspective of the developer i
01:32:49 mean it's brilliant right well and and and and you know you know so that's like across
01:32:56 the spectrum of of providers of chips but then there's also the the time
01:33:03 thing because you know as you went from one generation to the next generation to the next generation they
01:33:07 were all different and you would often have to rewrite your software i mean
01:33:13 generations of  cp of machines of different kinds yeah so so like like like one of the
01:33:19 things that sucked about a year out of my life was when sun went from the the motorola
01:33:28 68010 processor to the 68020 processor then they had a number of differences
01:33:37 and one of them hit us really hard and i ended up being the the point guy on the worst case of where
01:33:47 the new instruction cache architecture heard us well okay so i mean so when did this
01:33:54 idea i mean okay so yeah you you articulate a really clear fundamental problem in all of computing but
01:34:03 how where do you get the guts to think we can actually solve this you know in our conversations with
01:34:09 you know all these vendors you know these these problems started to because it reminded me of
01:34:28 a summer job that i had had in grad school so back in grad school my my thesis advisor
01:34:40 well i had two thesis advisors for bizarre reasons one of them was a guy named raj reddy the other one was
01:34:47 bob sproul raj i love ra i really love both of them the the department had bought
01:35:06 a bunch of like early workstations from a company called three rivers computer company
01:35:13 and three rivers computer company was a bunch of electrical engineers who wanted to do as little software as possible
01:35:21 so they knew that they'd need to have like compilers and os and stuff like that and they didn't want to do any of that
01:35:28 and they wanted to do that for as close to zero money as possible what they did was they they built a
01:35:39 machine whose instruction set was the was literally the byte code for ucsd pascal
01:35:50 the p code that was that was written for this machine and for various reasons you know the
01:36:08 company wasn't doing terrifically well we had all the software on these machines and we wanted it to run on
01:36:12 other machines principally the backs and and so raj asked me if i could come up
01:36:24 with a way to port all of this software and translate from the
01:36:31 from from from the the the the perk machines to vax's and and i think he you know what he had in
01:36:41 mind was something that would translate from like pascal to c or pascal to
01:36:51 actually at those times pretty much it was you could translate to c or c and if you didn't like translating
01:36:57 to c you could translate to c there was you know it's you know it's
01:37:04 like the the henry ford you know any color you wanted just as long as it's black
01:37:12 and and i went that's really hard and and i and i noticed that you know
01:37:19 and i was like looking at stuff and i went oh i bet i could rewrite
01:37:33 and and then i started to realize that you know there were some properties of p code that made that really easy some
01:37:40 properties that made it really hard so i ended up writing this thing that translated from from p code on the three
01:37:51 rivers perks into assembly code on the backs and i actually got higher quality code than the c compiler
01:38:02 and so so everything just went got really fast it was really easy it was like wow i thought that was a sleazy hack
01:38:12 because i was lazy and in actual fact it worked really well and and i and i tried to convince people
01:38:19 that that was maybe a good thesis topic yeah and nobody was it was you know it was like nah really that's
01:38:29 i mean yeah it's really it's kind of a brilliant idea right maybe you didn't have the
01:38:36 you weren't able to articulate the big picture of it yeah and and i think you know that was a
01:38:44 a key part but so then you know clock comes forward a few years and it's like we've got to be able to you know that
01:38:51 you know the you know if they want to be able to switch from you know this weird microprocessor
01:38:56 to that weird and totally different microprocessor how do you do that
01:39:04 and i kind of went oh maybe by doing something kind of in the space of
01:39:12 you know pascal p code you know i could do like multiple translators and i spent some time thinking about that and
01:39:18 thinking about you know what worked and what didn't work when i did the the the p code to vax translator
01:39:29 and i talked to some of the folks who were involved in small talk because and and and then i kind of went
01:39:41 yeah let's that i want to do that yeah because that act you know and and it had the the other
01:39:45 advantage that you could either interpret it or compile it and interpreters are usually
01:39:57 easier to do but not as fast as a compiler so i figured good i can be lazy again um
01:40:07 you know you know sometimes i think that most of my good ideas are driven by laziness and often i find
01:40:14 that people some of the people's stupidest ideas are because they're yeah they just want to build something
01:40:24 really complicated it's like it doesn't need to be that complicated yeah and so and so that's how that came out
01:40:34 and you know but that also turned into kind of a you know almost a religious position on my part which was
01:40:44 which got me in in several other fights so like like one of the things that was a real
01:40:50 difference was the way that arithmetic worked you know once upon a time there were you know it
01:41:00 wasn't always just two's complement arithmetic there were some machines that had one's complement arithmetic which was like
01:41:08 almost anything built by cdc and occasionally there were machines that were decimal arithmetic
01:41:17 and and i was like this is crazy you know pretty much two's complement integer arithmetic has one
01:41:25 so just let's just do that just to do that one of the other places where there was a lot of variability was
01:41:39 and that was causing people throughout the software industry much pain because you couldn't do a numerical computing library that would
01:41:49 work on cdc and then have it work on an ibm machine and work on it on a deck machine um
01:41:57 and as a as a part of that whole struggle there had been this this big body of work on
01:42:05 on floating point standards and this thing emerged that came to be called ieee 754
01:42:13 which is the floating point standard that pretty much has take taken over the entire universe um
01:42:21 and and at the time i was doing java it had pretty much completed taking over the universe
01:42:27 there were still a few pockets of holdouts but i was like you know it's important to be
01:42:35 able to say what two plus two means yeah and and so i went that and
01:42:45 one of the ways that i got into fights with people was that there were a few machines that did not implement
01:42:55 ieee 754 correctly well of course that's that's all short-term kind of fights
01:43:00 i think in the in the long term i think this vision is won out yeah and and i think it's you
01:43:06 know and it worked out over time i mean the the biggest fights were with intel because they had done some strange
01:43:15 things with rounding they'd done some strange things with their transcendental functions
01:43:22 which might turned into a mushroom cloud of you know weirdness and the name in the name of optimization
01:43:29 but from the perspective of the developer that's not that's not good well their issues with transcendental functions
01:43:35 were just stupid okay so that that's that's not even a trade-off that's just absolutely
01:43:42 yeah they were they were doing range reduction in of first sign and cosine using a slightly wrong value for pi i
01:43:49 got it go ahead ten minutes so in the interest of time
01:43:54 two questions so one about android and one about life  so one i mean we could talk for
01:44:03 many more hours i hope  eventually we might talk again but i gotta ask you about android and
01:44:08 the use of java there because it's one of the many places where java
01:44:16 just has a huge impact on this world just on your opinion is there things that make you happy
01:44:24  about the way andro  java is used in the android world and are there things that
01:44:30 you wish were different i i don't know how to do a short answer to that but i have to do a short answer to
01:44:35 that so you know i'm happy that they did it java had been running on cell phones at
01:44:42 that time for quite a few years and it worked really really well there were things about how they did it
01:44:53 and and in particular various ways that they kind of you know violated all kinds of contracts
01:45:01 the guy who who led it andy rubin he crossed a lot of lines there's some
01:45:07 lines crossed yeah lines were crossed that have since you know
01:45:14 mushroomed into giant court cases and you know they didn't need to do that and in fact it would have been so much
01:45:25 cheaper for them to not cross lines i mean i suppose they didn't anticipate the the success 
01:45:34 of this whole endeavor or do you think at that time it was already clear that this is  it's gonna
01:45:38 blow up i guess i i i i sort of came to believe that it didn't matter what
01:45:50 okay he's he's he you know i kind of started to think of him as as as like a manufacturer of bombs
01:46:01 yeah  some of the best things in this world come about through a little bit of   explosive well and some of the worst
01:46:08 and some of the worst beautifully put but is there and and like you said i mean
01:46:15 does that make you proud that the java is in yeah is in millions i mean it could be
01:46:21 billions of devices and yeah well i mean it was in in billions of phones before android came along
01:46:30 and you know i'm i'm just as proud as you know of the way that like
01:46:38 the the smart card standards adopted java and they did it they you know everybody involved in that did a really good job
01:46:45 and that's you know billions and billions that's crazy the sim cards you know the sim cards in your pocket
01:46:54 yeah i mean it's outside of that world for a decade so i don't know how that has it has evolved but
01:47:04 you know it's just been crazy so on that topic let me ask  again there's a million technical things 
01:47:13 we could talk about but let me ask the absurd the old  what do you hope when you look back at
01:47:23 your life and the people talk about you right about you
01:47:30 500 years from now  what do you hope people not being afraid to take a leap of faith
01:47:42 i mean i you know i've got this this kind of weird history of doing weird stuff and
01:47:49 it worked out pretty damn it worked out right and i think some of the weirder stuff that i've done
01:47:58 has been the coolest and some of it some of it crashed and burned and yeah you know i think well over half
01:48:06 of the stuff that i've done has crashed and burned which has occasionally been really annoying
01:48:15 but still you kept doing it but yeah yeah yeah and you know they're you know you even when things crash and burn you
01:48:22 you at least learn something from it by way of advice you know people developers engineers
01:48:30 scientists are just people who are young  to look up to you what advice would you give them
01:48:37 how to  how to approach their life don't be afraid of risk it's okay to do stupid things once
01:48:47 maybe even a couple times you know you you know you get you get a pass on the the first time or
01:48:52 two that you do something stupid you know the third or fourth time yeah not so much um
01:49:03 but also you know i don't know why but really early on i started to think about um
01:49:14 ethical choices in my life and because i a big science fiction fan i i i got to thinking about
01:49:25 like just about every technical decision i make in terms of how do you want you know are
01:49:33 you building blade runner or star trek which one's better which which future would you rather live in
01:49:39 you know so what's the what's the answer to that well i would just i would sure rather live in the universe
01:49:45 of star trek soundtrack yeah that opens up a whole topic about ai but that's a really interesting
01:49:52 yeah yeah yeah it's a really interesting idea so your favorite ai system would be data  from  from star trek my least
01:49:59 favorite would easily be skynet yeah beautifully put i don't think there's a better way to end it
01:50:07 james i can't say enough how much of an honor it is to meet you to talk to you thanks so much
01:50:12 for wasting your time with me today not a waste at all thanks james all right thanks thanks for
01:50:18 listening to this conversation with james gosling and thank you to our sponsors public
01:50:22 goods betterhelp and expressvpn please check out these sponsors in the description to get a
01:50:27 discount and to support this podcast if you enjoy this thing
01:50:33 subscribe on youtube review it with 5 stars on apple podcast follow on spotify support on patreon or
01:50:39 connect with me on twitter at lex friedman and now let me leave you with some words from james gosling
