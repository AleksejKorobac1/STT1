00:00:01 the following is a conversation with Jeff Atwood he is the co-founder of Stack Overflow
00:00:07 Stack Exchange websites that are visited by millions of people every single day much like with Wikipedia it is difficult
00:00:14 to understate the impact on global knowledge and productivity that these networks of sites have created Jeff is
00:00:23 also the author of the famed blog coding horror and the founder of discourse an open-source software project that seeks
00:00:31 to improve the quality of our online community discussions this conversation is part of the MIT course on artificial
00:00:39 general intelligence and the artificial intelligence podcast if you enjoy it subscribe on youtube itunes or your
00:00:46 podcast provider of choice or simply connect with me on twitter at Lex Friedman spelled Fri D and now here's my
00:00:56 conversation with Jeff Atwood having co-created and managed for a few years the world's largest community of
00:01:03 programmers in Stack Overflow ten years ago what do you think motivates most programmers is it fame fortune glory
00:01:13 process of programming itself or is it the sense of belonging to a community it's puzzles really I think it's this
00:01:22 idea of working on puzzles independently of other people and just solving a problem sort of like on your own almost
00:01:29 although you know nobody really works alone and programming anymore but I will say there's that there's an aspect of
00:01:36 sort of hiding yourself away and just sort of beating on a problem until you solve it like brute force basically to
00:01:42 me it's what a lot of programming is is like the computer so fast right you can do things that would take forever for a
00:01:47 human but you just do them like so many times and so often that you get the answer right you're saying just the pure
00:01:55 act of tinkering with the code yes is is the thing that drives most probably the joy the struggle balance within the joy
00:02:03 of overcoming the the brute-force process of pain and suffering that eventually leads to something that
00:02:10 actually works well data is fun too like there's this thing called the the shuffling problem like the naive shuffle
00:02:15 that most programmers right has a huge flaw and there's a lot of articles online about this because it can be
00:02:20 really bad if you're like a casino and you have an unsophisticated programmer writing your shuffle algorithm there's
00:02:25 surprising ways to get this wrong but the neat thing is the way to figure that out is just to run your shuffle a bunch
00:02:30 of times and see like how many orientations of cards you get you should get an equal distribution of all the
00:02:36 cards and with the naive method of shuffling if you just look at the data if you just brute force and say okay I
00:02:40 don't know what's gonna happen you just write a program that does it a billion times and then see what the
00:02:46 buckets look like of the data and the Monty Hall problem is another example of that where you have three doors and
00:02:51 somebody gives you information about another door so the correct answer is you should always switch and the Monty
00:02:56 Hall problem which is not intuitive and people it freaks people out all the time right but you can solve it with data if
00:03:02 you write a program that does the Monty Hall you know game and then never switches and always switches just
00:03:07 compare you would immediately see that you don't have to be smart right you know to figure out the answer
00:03:12 algorithmically you can just brute force it out with data and say well I know the answer is this because I ran the program
00:03:16 a billion times and these are the data buckets that I got from it right so empirically find it but what's the joy
00:03:23 of that what so for you for you personally outside of family what motivates you in this process
00:03:30 yes well to be honest I don't really write a lot of code anymore like what I do at discourse is like manager II stuff
00:03:37 which I always kind of despised right like as a programmer you think of managers as people who don't really do
00:03:42 anything themselves but the weird thing about code is like you realize that like language is code like the ability to
00:03:49 direct other people lets you get more stuff than you've done then you could by yourself anyway you should write
00:03:54 languages code languages community communication yeah those are humans yes you can think of it as a systemic so
00:04:01 what what is it like to be what makes before we get into program it what makes a good manager what makes a good leader
00:04:07 well I think a leader it's all about leading by example first of all like sort of doing and being the things that
00:04:13 you want to be now this can be kind of exhausting particular you have kids because you realize that your kids are
00:04:18 watching you like all the time like even in ways that you've stopped seeing yourself like the hardest person to see
00:04:23 on the planet is really yourself right it's funnier to see other people and and and make judgments about them but
00:04:27 yourself like your for biased you don't actually see yourself the way other people see you
00:04:32 often you're very very hard on yourself in a way that other people really aren't going to be so you know that's one of
00:04:38 the insights is you know you've got to be really diligent about thinking like am i behaving in a way that represents
00:04:44 how I want other people to behave right like leading through example there's a lot of examples of leaders that really
00:04:49 mess this up right like they make decisions that are like wow that's why would you know it's just it's it's it's
00:04:55 a bad example for other people so I think leading by example is one the other one I believe it is working really
00:05:00 hard now I don't mean like working exhaustively but like showing a real passion for the problem like you know
00:05:08 not necessarily your solution the problem but the problem itself is just one that you really believe in like with
00:05:13 discourse for example the problem that we're looking at which is my current project is how do you get people in
00:05:18 groups to communicate in a way that doesn't like break down into the howling of wolves right like how do you deal
00:05:24 with trolling not like technical problems of how do I get people to post paragraphs how do I get people to use
00:05:28 bold how to get people to use complete sentences although those are problems as well but like how do I get people to get
00:05:32 along with each other right like and then solve whatever problem it is they set up to solver you
00:05:38 know reach some consensus on discussion or just like not hurt each other even right like maybe it's a discussion
00:05:42 doesn't really matter but are people like yelling at each other right and why right like that's not the purpose of
00:05:47 this kind of communication so I would say you know leadership is about you know setting an example you know doing
00:05:54 the things that represent what you want to be and making sure that you're actually doing those things and there's
00:05:58 a trick to that too because the things you don't do also say a lot about what you are yeah so let's pause on that one
00:06:05 so those two things are fascinating so how do you have as a leader as that self-awareness so you just said it's
00:06:10 really hard to be self-aware so for you personally or maybe for other leaders you've seen or look up to how do you
00:06:17 know the both that the things you're doing are the wrong things to be doing the way you speak to others the way you
00:06:23 behave and the things you're not doing how do you how do you get that service there's two aspects that one is like
00:06:28 processing feedback that you're getting so how you get feedback well right sorry are you getting feedback right like so
00:06:33 one way we do it for example a discourse we have three co-founders and we periodically talk about decisions before
00:06:39 we make them so it's not like one person can make a mistake or like that's you know there can be
00:06:43 misunderstanding things like this so it's part of like group consensus of leadership is like it's good to have I think
00:06:49 systems where there's one leader and that leader has the rule of absolute law are just really dangerous and my
00:06:54 experience for communities for example like a few of communities run by one person that one person makes all the
00:06:58 decisions that person's gonna have a bad day something could happen to that person you know something you know
00:07:03 there's a lot of variables so like at first when you think about leadership haven't have multiple people doing
00:07:08 leadership and have them talk amongst each other so giving each other feedback about the decisions that they're making
00:07:13 and then when you do get feedback I think there's that little voice in your head right like or your gut or wherever
00:07:19 you want to put it in your putti I think that voice is really important like I think most people who have any kind of
00:07:26 moral compass or like want to do most people want to do the right thing I do believe that I mean there might be a
00:07:31 handful of sociopaths out there that don't but most people they want other people to think of them as a good person
00:07:35 and why wouldn't you right like do you want people to despise you I mean that's just weird right so you have that little
00:07:40 voice that sort of the angel and devil on your shoulder sort of talking to you about like what you're doing how you're
00:07:44 doing how does it make you feel to make these decisions right and I think having some attunement to that voice is
00:07:51 important but you said that voice also for I think this is a programmer situation to what sometimes the devil on
00:07:58 the shoulder is a little a little too loud so you a little too self-critical for a lot of developers and especially
00:08:04 when you have introverted personality how do you struggle with the self-criticism other criticism others so
00:08:12 one of the things of leadership is to do something that's not potentially unpopular or what people doubt you and
00:08:17 you still go through with the decision so what's that balance like I think you have to walk people through your
00:08:23 decision-making right like if if this is where blogging is really important communication is so important again code
00:08:27 language is just another kind of code is like here is the program by which I arrived at the conclusion that I'm gonna
00:08:34 reach right it's one thing to say like this is decisions final deal with it right that's not usually
00:08:39 satisfying people but if you say look you know we've been thinking this problem for a while here's some stuff
00:08:43 that's happened here's what we think is right here's our goals here's one achieve and we've looked at these
00:08:49 options and we think this of available options is the best option people be like oh okay
00:08:52 alright maybe I don't totally agree with you but I can kind of see where you're coming from and like
00:08:56 see it's not just arbitrary decision delivered from a cloud of flames in the sky right it's like a human trying to
00:09:03 reach some kind of consensus about you know goals and their goals might be different than yours that's completely
00:09:08 legit right but if you're making that clear it's like oh well the reason we don't agree is because we have totally
00:09:12 different goals right like how could we agree it's not that you're a bad person it's that we have radically different
00:09:17 goals in mind when we started looking this problem and the other one you said is passion so or hard work sorry well
00:09:23 those are tied together to me out in my mind say Hardware compassionate like for me like I just really love the problem
00:09:28 discourse is sending out to solve because in a way it's like there's a there's a vision of the world where it
00:09:34 all devolves into Facebook basically owning everything and every aspect of human communication right and this has
00:09:38 always been kind of a scary world for me first cuz I don't I think Facebook is really good at execution I gotta
00:09:43 compliment them they're very competent in terms of what they're doing but Facebook has not much of a moral compass
00:09:49 in terms of Facebook cares about Facebook really they don't really care about you and your problems what they
00:09:55 care about is how big they can make Facebook right is that you're talking about the company or just a mechanism
00:10:00 how Facebook works kind of both really right like and the idea with discourse the reason I'm so passionate about it is
00:10:05 because I believe every community should have the right to own themselves right like they should have their own software
00:10:10 that they can run that belongs to them that's their space where they can set the rules and if they don't like it they
00:10:15 can move to different hosting or you know whatever they need they need to have it can happen but like this this
00:10:21 idea of a company town we're all human communication is implicitly owned by whatsapp Instagram and Facebook and its
00:10:27 really disturbing too because Facebook is really smart like I said they're great at execution buying and what's
00:10:30 happened buying Instagram were incredibly smart decisions and they also do this thing on if you know but they
00:10:37 have this VPN software that they give away for free on smartphones and it indirectly feeds all the the data about
00:10:43 the traffic back to Facebook so they can see what's actually getting popular through the VPNs right they have low
00:10:48 level access to the network data because users have let them have that so ok let's let's take a small pause here
00:10:55 first of all discourse can you talk about can you lay out the land of all the different ways you can have
00:11:03 community so there's Stack Overflow that you've built there's discourse yeah so Stack Overflow
00:11:07 is kind of like a wiki Wikipedia you talk and it's a very specific scalpel very focused so what is the purpose of
00:11:15 discourse and maybe contrast that with Facebook first of all say what is this course yeah start from the beginning
00:11:20 well let me start with the very being so Stack Overflow is very structured wiki style QA for programmers right and that
00:11:26 was the problem we first worked on it when we started we thought it was discussions because we looked at like
00:11:32 programming forums and other things but we quickly realized we were doing QA which is a very narrow subset of human
00:11:38 communication sizes so when you start Stack Overflow you thought you didn't even know the QA you know it would be
00:11:44 well we didn't know we did we had an idea of like ok these are things that we see working online we had a goal right
00:11:50 our goal was there was this site experts exchange with a very unfortunate thank you for killing that site yeah I know
00:11:55 right like a lot of people don't remember it anymore which is great like that's the measure of success when
00:11:59 people don't remember the thing that you were trying to replace then you've totally won so it was a place to get
00:12:05 answers to programming questions but it wasn't clear if it was like focused Q&A if it was a discussion there were plenty
00:12:10 of programming forums so we weren't really sure we were like ok we'll take aspects of Digg and reddit like voting
00:12:16 we're very important reordering answers based on votes wiki style stuff of like being able to edit post not just your
00:12:21 posts but other people's post to make them better and keep them more up-to-date ownership of blogging of like
00:12:26 ok this is me I'm saying this is my voice you know this is the stuff that I know and you know you give your
00:12:33 reputation accrues to you and it's pure recognition so you asked earlier like what motivates programmers I think peer
00:12:40 recognition motivates them a lot that was one of the key insights of Stack Overflow was like recognition from your
00:12:45 peers is why things get done initially moneyness well your boss but like your peers saying wow this person really
00:12:50 knows their stuff has a lot of value so the reputation system came from that so we were sort of frankensteining a bunch
00:12:57 of stuff together in Stack Overflow of like stuff we had seen working and we knew worked and that became Stack
00:13:05 Overflow and over time we realized it wasn't really discussion it was very focused questions and answers there
00:13:11 wasn't a lot of room on the page for let me talk about this tangential thing it was more like ok he's an answering
00:13:15 question is it clarifying the question or could it be an alternative answer to the same question because there's
00:13:20 usually more than one way to do it in program there's say five to ten ways and one of the
00:13:24 patterns we got into early on stackoverflow was there are questions where there would be like hundreds of
00:13:30 answers more like Wow how can there be a programming question with 500 200 500 answers and we looked
00:13:36 at those we realized those were not really questions in the traditional sense they were discussions it was stuff
00:13:42 that we allowed early on that we eventually decided wasn't allowed such as what's your favorite programming food
00:13:47 you know what's the funniest programming cartoon you've seen and we had to sort of backfill oh into rules about like why
00:13:53 isn't this allowed such as is this a real problem you're facing like nobody goes to work and says wow I can't work
00:13:58 because I don't know what the funniest programming cartoon is so sorry can't compile this code now right it's not a
00:14:04 real problem you're facing in your job that was run rule and ii like what can you really learn from that it's like
00:14:08 what i call accidental learning or reddit style learning where you just acknowledge browse some things
00:14:13 oh wow you know did you know tree frogs only live three years I mean I just made that up I don't know that's true but 
00:14:18 I didn't really set out to learn that I don't need to know that right it's an accidental learning it was more
00:14:24 intentional learning we were like okay I have a problem and I want to learn about stuff around this problem having right
00:14:28 and it could be theory could be compiler theory it could be other stuff but I'm having a compiler problem hence I need
00:14:34 to know the compiler theory that aspect of it that gives me the the gets me to my answer right so kind of a directed
00:14:40 learning so we had to backfill all these rules as we sort of figured out what the heck it was we were doing and the system
00:14:45 came very strict over time and a lot of people still complain about that and I wrote my latest blog entry what the
00:14:51 Stack Overflow want to be I wanted to be when it grows out celebrating the 10-year anniversary yeah yeah so ten
00:14:56 years and it that system is trended towards strictness there's a variety of reasons for this one is people don't
00:15:02 like to see other people get reputation for stuff as they view they view as frivolous which I can actually
00:15:06 understand because if you saw a program or got like five hundred up votes for funniest programming cartoon or funniest
00:15:12 comment they had seen in code it's like well why do they have that reputation is because they wrote the joke probably not
00:15:17 I mean if they did maybe or the cartoon right they're getting a bunch of reputation based on someone else's work
00:15:22 that's not even like programming it's just a joke right it's a related to birth so you begin to resent that like
00:15:28 well that's not fair and it isn't at some level they're correct I mean I empathize because like it's not correct
00:15:32 you get reputation for that versus here's a really gnarly regular expression problem and here's a
00:15:38 really you know clever insightful you know detailed answer laying out oh here's why you're seeing the behavior
00:15:43 that you're seeing here let me teach you some things about how to avoid that in the future that's that's great like
00:15:47 that's gold right you want people to grab a petition for that not so much for wow look at this funny thing I saw
00:15:52 alright great so there's this very specific Q&A format and then take me through the journey towards this course
00:15:59 in Facebook and Twitter so you start at the beginning that Stack Overflow evolved to have a purpose so where does
00:16:07 this course this passion you have for creating community for discussion what is that when was that born and well part
00:16:13 of it is based on the realization the Stack Overflow is only good for very specific subjects where they're sort of
00:16:19 it's it's based on data facts and science where answers can be kind of verified to be true another form of that
00:16:25 is there's the book of knowledge like the tome of knowledge that defines like whatever it is you can refer to that
00:16:31 book and I'll give you the answer there has to be it only works on subjects where there's like semi clear answers to
00:16:37 things that can be verified in some form now again there's always more than one way to do it there's complete
00:16:42 flexibility and system around that but where it falls down is stuff like poker and Lego like we had if you go to Stack
00:16:49 Exchange calm we have an engine that tries to launch different Q&A topics right and people can propose Q&A topics
00:16:58 sample questions and and if he gets enough support within the network we launch that Q&A site so someone's we
00:17:02 launched where poker and Lego and they did horribly right because I mean there might still be there lingering on in
00:17:07 some form but it was an experiment this is like a test right and some subjects work super well in the stack engine and
00:17:12 some don't but the reason Lego and Poker don't work is because they're so social really it's
00:17:18 not about you know what's the rule here in poker it's like well you know what kind of cigars do we like to smoke while
00:17:24 playing poker or you know what's what's a cool set of cards to use when playing poker or you know what some strategies
00:17:30 like say I have this hand come up with some strategies I could use it's more of a discussion around like what's
00:17:34 happening like with Lego you know same thing like here's this cool Lego set I found look how awesome
00:17:37 this isn't like yeah that's freaking awesome right it's not question right there's all these social components
00:17:43 discussions that don't fit at all like we literally have to just allow those in Stack Overflow kids it's not about being
00:17:47 social it's about problems that you're facing in your work that you need concrete answers for right
00:17:52 like you have a real demonstrated problem that's sort of blocking you in something nobody's blocked by you know
00:17:57 what should I do when I have a straight flush right like blocking problem in the world it's just an opportunity to hang
00:18:04 out and discuss so this course was a way to address that and say look you know discussion forum software ahead was very
00:18:12 very bad and when I came out of Stack Overflow until late or early 20 2013 2012 it was still very very bad I've
00:18:21 expected it improved and in the four years since I last looked but it had not improved at all and I was like well
00:18:27 that's kind of terrible because I love these communities of people talking about things that they love you know
00:18:32 that there's just communities of interest right and there's no good software for them like startups would
00:18:38 come to me and say hey Jeff I wanna you know I have this startup here's my idea and the first thing I would say them is
00:18:43 like well first why are you asking me like I don't really know your field right let it's necessarily like why
00:18:48 aren't you asking like the community like the people that are interested in this problem the people that are using
00:18:53 your product why aren't you talking to them and then they say Oh a great idea like how do I do that and then that's
00:18:57 when I started playing sad trombone because I realized all the software involving talking to your users
00:19:03 customers audience patrons whatever it is it was all really bad you know I was like stuff that I would be embarrassed
00:19:08 to recommend to other people and yet that's where I felt they could get the biggest and strongest most effective
00:19:14 input for what they should be doing with their product right it's from their users from their community right that's
00:19:18 what we did on Stack Overflow so what we're talking about with forms the what is it the dark matter of the
00:19:26 Internet it's still I don't know if it's still but for a longest time it has some of the most passionate and fascinating
00:19:33 discussions and what's the usual structure there's usually what it's a it's linear so it's sequential it's
00:19:39 you're posting one after the other and there's pagination so it's every there's a 10th post and you go to the next page
00:19:48 and that format still is used by like I'm we're doing a lot of research with Tesla of vehicles and there's Tesla
00:19:54 Motors Club forum which is extremely really wanted to run that actually they pinged us about I don't think we got
00:19:58 but I really would like to gotten that one but they've started before even 2012 I believe I mean they've been running
00:20:05 for a long time it's still an extremely rich source of information so what what's broken about that system and how
00:20:12 are you trying to fix it I think there's a lot of power in in connecting people that love the same stuff around that
00:20:20 specific topic meaning Facebook's idea of connection is just any human that's related to another human right like like
00:20:26 through friendship or you know any other reason Facebook's idea of the world is sort of the status update right like a friend of
00:20:33 yours did something ate at a restaurant right whereas discussion forums were additionally around the interest graph
00:20:40 like I love electric cars specifically I love Tesla right like I love the way they approach the the problem I love the
00:20:47 style of the founder I just love the the design ethic there's a lot to like about Tesla if you saw the oatmeal he did a
00:20:53 whole love comic to Tesla and it was actually kind of cool because I learned some stuff he was some how great Tesla
00:20:57 cars were specifically like how they were built differently and he went into a lot of great detail that was really
00:21:02 interesting to me that oatmeal post if you read it is the genesis of pretty much all interest communities I just
00:21:07 really love this stuff's like for me devilish yo-yos right like I'm into the yo-yo communities and there's these
00:21:12 interest communities are just really fascinating to me and I feel more connected to the yo-yo communities than
00:21:17 I do to you know friends that I don't see that often right like to me that the powerful thing is the interest graph and
00:21:23 Facebook kind of dabbles in the interest graph I mean they have groups you can sign up for groups and stuff but it's
00:21:29 really about the relationship graph like I'm this is my coworker this is my relative this is my friend but not so
00:21:35 much about the interest so I think that's the the linchpin of which forums and communities are built on that I
00:21:42 personally love like I I like I said leadership is about passion right and being passionate about stuff is is a
00:21:47 really valid way to look at the world and I think it's a way a lot of stuff in the world gets done like I once said
00:21:53 someone described me as he's like Jeff you're a guy who you just get super passionate about a few things at a time
00:21:58 and you just go super team from those things and I was like oh that's kind of right that's kind of what I do I'll get
00:22:03 into something and just be super into that for a couple years or whatever I just learn all I can about it and go
00:22:09 super deep in it and that's how I enjoy experiencing the world right like not being shallow on a bunch of
00:22:14 things but being really deep on a few things that I'm interested in so forums kind of unlocked that right and you know
00:22:19 you don't want a world where everything belongs to Facebook at least I don't I want a world where communities can kind
00:22:23 of own themselves set their own norms set their own rules control the experience because commit community is
00:22:29 also about ownership right like if if you're meeting at the Barnes & Noble every Thursday at Barnes & Noble says
00:22:33 get out of here you guys don't buy enough books well you know you're kind of hose right Barnes and Noble owns you
00:22:39 right like you can't but if you have your own meeting space you know your own Clubhouse you can set your own rules
00:22:44 decide what you want to talk about there and just really generate a lot better information than you could like hanging
00:22:50 out at Barnes & Noble every Thursday at 3:00 p.m. right so that's kind of the vision of discourse is a place where
00:22:57 it's it's fully open source you can take the software you can saw it anywhere and you know you and a group of people can
00:23:02 go deep on whatever it is that you're into and it this works for startups right startups are a group of people who
00:23:07 go super deep on a specific problem right and they want to talk to the comedian's like well install this course
00:23:11 right that's what we do at this course that's what I did a stack overflow I spent a lot of time on meta stack
00:23:17 overflow which is our internal well public community feedback site and just experiencing what the users were
00:23:24 experiencing right because they're the ones doing all the work in the system and they had a lot of interesting
00:23:29 feedback and there's that 90/10 rule of like 90% of the feedback you get is not really actionable for a variety reasons
00:23:33 it might be bad feedback it might be crazy feedback it might be feedback you just can't act on right now but there's
00:23:38 10% of it that's like gold it's like literally gold and diamonds where it's like feedback of really good
00:23:43 improvements to your core product that are not super hard to get to and actually make a lot of sense and my
00:23:47 favorite is about 5% of those stuff I didn't even see coming it's like oh my god I never even thought of that but
00:23:51 that's a brilliant idea right and I can point to so many features of Stack Overflow that we drive
00:23:56 from metastatic overflow feedback and meta discourse right same exact principle at discourse you know we're
00:24:02 getting ideas from the comedian's like oh my god I never thought of that but that's fantastic right like I love that
00:24:07 relationship with the community from having built these communities what have you what have you learn about what's the
00:24:12 process of getting a critical mass of members in a community is it luck skill timing persistence what is is it the
00:24:21 tools like discourse that empower that community what what's the key aspect of starting one guy a gal and then building it to
00:24:30 210 and 100 and a thousand so on I think we're starting with an end of one I mean I think it's persistence and and also
00:24:37 you have to be interesting like somebody I really admire once that's something that I always liked about blogging he's
00:24:42 like here's how you blog you have to have something interesting to say and have an interesting way of saying it
00:24:48 right yeah and then do that for like 10 years so that's the genesis is like you have to have sort of something
00:24:54 interesting to say that's not exactly what everyone else is saying and an interesting way of saying which is
00:24:57 another one same kind of entertaining way of saying it and then as far as growing it it's like ritual you know
00:25:03 like you have to like say you're starting a blog you have to say look I'm gonna blog every week three times a week
00:25:09 and you have to stick to that schedule right because until you do that for like several years you're never gonna get
00:25:15 anywhere like it just takes years to get to where you need to get to and part of that is having the discipline to stick
00:25:20 with the schedule and it helps you get if it's something you're passionate about this won't feel like work like I
00:25:24 love this I could talk about this all day every day right you just have to do in a way that's interesting to other
00:25:29 people and then as you're growing the community that pattern of participation within the community of like generating
00:25:34 these artifacts and inviting other people to help you like collaborate on these artifacts like even in case of
00:25:40 blogging like I felt in the early days of my blog which I started 2004 which is really the genesis of Stack Overflow if
00:25:45 you look at all my blog it leads up to Stack Overflow which was I have all this energy in my blog but I don't like
00:25:51 40,000 people were subscribing to me and I was like I want to do something and then then I met Joel and said hey Joel I
00:25:55 want to do something take this ball of energy for my blog and do something and all the people reading my blog saw
00:26:00 that's oh cool you're involving us you're saying look you're part of this community let's build this thing
00:26:05 together like they pick the name like we voted on the name for Stack Overflow on my blog like we came and naming is super
00:26:11 hard first why the hardest problem computer science is coming with a good name for stuff right yeah but there you
00:26:16 can go back to my log there's the poll where we voted and Stack Overflow became the name of the site and all the early
00:26:22 beta users are stuck over we're audience of my blog plus Joel's blog right so we started from like if you look at the
00:26:27 Genesis okay I was just a programmer who said hey I love programming but I have no outlet to talk about it so I'm just
00:26:32 gonna blog about it because I don't have enough people to work to talk to about it because at the time I worked a place
00:26:37 where you know programming wasn't the core output of the company was a pharmaceutical company and I just love
00:26:43 this stuff you know to an absurd degree so I was like I'll just blog about it and then I'll find an audience and
00:26:48 eventually found an audience eventually I found Joel and eventually built Stack Overflow from that one core of activity
00:26:54 right but it was that repetition of feeding back in feedback from my blog comments feedback from Joel feedback
00:26:59 from them the early Stack Overflow community when people see that you're doing that they will follow along with
00:27:04 you right they say look cool you're here in good faith you're actually you know not listening to everything because I'm
00:27:09 impossible that's impossible but you're actually you know waiting our feedback and what you're doing because
00:27:15 I'm and why wouldn't I because who does all the work on Stack Overflow me Joel no it's the other programmers that are
00:27:21 doing all the work so you gotta have some respect for that and then you know discipline around look you know we're
00:27:26 trying to do a very specific thing here on Stack Overflow we're not trying to solve all the world's problems we're
00:27:30 trying to solve this very specific QA problem in a very specific way not because we're jerks about it but because
00:27:36 these strict set of rules help us get really good results right and programmers that's an easy sell for the
00:27:42 most part because programmers are used to dealing with ridiculous systems of rules like constantly that's basically
00:27:47 their job so they're they're very oh yeah super strict system of rules that lets me get on what that's programming
00:27:53 right that's what Stack Overflow is so so you're making it sound easy but in 2004 let's go back there in 2004 you
00:28:01 started the blog I'm quoting horror was it called that at the beginning at the very beginning was one of the smart
00:28:05 things I did it's from a book by Steve McConnell code complete which is where my favorite programming but still
00:28:09 probably my number one programming book for anyone to read one of the smart things I did back then I don't always do
00:28:15 smart things when I start stuff I contacted Stephen said hey I really like this it was a sidebar illustration
00:28:22 indicating danger in code right coding horror was like watch out and I love that illustration cuz it spoke to me
00:28:28 because I saw that illustration go oh my god that's me like I'm always my own worst enemy like that and a key insight
00:28:33 and programming is every time you write something think how am I gonna screw myself because you will constantly right
00:28:41 so that that icon was like oh yeah I need to constantly hold that mirror up and look and say look you're very
00:28:46 fallible you're gonna screw this up like how can you build this in such a way that you're not gonna screw it up later
00:28:51 like how can you get that discipline around making sure at every step I'm thinking through all
00:28:56 the things that I could do wrong or that other people could do wrong because that is actually how you get to be a better
00:29:01 programmer a lot of times right so that sidebar illustration I loved it so much and I wrote Steve before I started my
00:29:06 belonging say hey can I have permission to use this cuz I just really likes illustration and Steve was kind enough
00:29:11 to give me a portion to do that and just continues to give me permission so yeah really that's awesome but in 2004 you
00:29:19 started this blog you know you look at it Stephen King this book on writing or Steven Pressfield the war of art book I
00:29:30 mean it seems like writers suffer I mean it's a hard process of writing write is there's gonna be suffering I mean I
00:29:35 won't kid you like well the work is suffering right like doing the work like even when you're every week you're like
00:29:40 okay that blog post wasn't very good or you know people didn't like it or people write said disparaging things about it
00:29:46 you have to like have the attitudes like you know no matter what happens I want to do this for me right it's not about
00:29:52 you it's about me I mean in the end it is about everyone because this is how good work gets out into the world but
00:29:58 you have to be pretty strict about saying like you know I'm selfish in the sense that I have to do this for me you
00:30:04 know you mentioned Stephen King like his book on writing but like one of things I do for example when writing is like I
00:30:09 read it out loud one of the best pieces of advice for writing anything is read it out loud like multiple times and make
00:30:15 it sound like you're talking because that is the goal of good writing it should sound like you said it with with
00:30:20 slightly better phrasing because you have two more time to think about your saying but like it should sound natural
00:30:24 when you say it and I think that's probably the single best writing advice and give anyone it's just just read it
00:30:30 over and over outloud make sure it sounds like something you would normally say and it sounds good and what's your
00:30:36 process of writing so there's usually a pretty good idea behind the blog post so ideas right so I think you gotta have
00:30:45 the concept that there's so many interesting things in the world like I mean my god the world is amazing right
00:30:51 like it's you could never write about everything that's going on because it's so incredible but if you can't come up
00:30:55 with like let's say one interesting thing per day to talk about then you're not trying hard enough because the world
00:31:00 is full of just super interesting stuff and one great way to like mine stuff is go back to old books because they bring
00:31:06 old stuff that's still super relevant and I did that a lot because I was like reading classic program books and a lot
00:31:11 of the early blockbuster like oh I was reading this program but can they brought this really cool concept and I
00:31:15 want talk about some more and you get the I mean you're not claiming credit for the idea but it gives you something
00:31:18 interesting to talk about that's kind of evergreen right like you don't have to go what should I talk about so just go
00:31:24 dig up some old classic programming books and find something that oh wow that's interesting or how does that
00:31:29 apply today or what about X&Y or compare these two concepts so pull a couple of sentences from that book and then sort
00:31:35 of play off of it almost reader disagree that so in 2007 you wrote that you were offered a significant amount of money to
00:31:47 sell the blog you chose not to what were all the elements you were thinking about because I'd like to take you back it
00:31:51 seems like there's a lot of non-linear decisions you made through life that's so what was that decision like right so
00:31:58 i one of the things I love is the choose your own adventure books which I loved as a kid and I feel like the early
00:32:02 programmer books cuz they're they're all about if-then statements right if this then this and they're also very very
00:32:08 unforgiving like there's all these sites that map the the classic teacher and venture books and how many how comes are
00:32:14 bad there's a lot of bad outcomes so part of the game is like oh I got a bow come go back one step go back on further
00:32:19 steps like how did I get here right like it's a sequence of decisions and this is true of life right like every decision
00:32:27 is a sequence right individually any individual decision is not really right or wrong but they lead you down a path
00:32:32 right so I do think there's some truth to that so this particular decision the blog II got fairly popular there's a lot
00:32:38 of RSS readers that I discovered and this guy contacted me out of the blue from this like bug tracking companies
00:32:43 like I really want to buy your blog for like I think it was around it was a hundred thousand dollars when I'm in
00:32:48 like eighty thousand but it was it was a lot right like and that's you know at the time like I would have a year's
00:32:54 worth of salary all at once so I'd really think about like well you know and I remember talking to people the
00:32:59 times like wow that's a lot of money but then I'm like I really like my blog right like do I want to sell my blog
00:33:04 because it wouldn't really belong to me anymore at that point and one of the guidelines that I like to I don't like
00:33:11 to give advice to people a lot but one of the piece of advice I do give because I do think it's really true and it's
00:33:16 generally helpful is whenever you're looking at a set of decisions like shut you a B or C you got to pick the
00:33:22 thing that's a little scarier in that list because not you know not like jump off a cliff scary but the thing that
00:33:27 makes you nervous because if you pick the safe choice it's usually you're not really pushing you're not pushing
00:33:32 yourself you're not choosing the thing that's gonna help you grow so for me the scarier choice was to say no I was like
00:33:37 well no let's just see where this is going right because then I own it I mean it belongs to me it's my thing and I can
00:33:44 just take it and to some other logical conclusion right because imagine how different the world would've been had I
00:33:49 said yes and sold the blog it's like they're probably gonna be stackoverflow yeah you know a lot of other stuff would
00:33:54 have changed so for that particular decision I think it was that same rule like what scares me a little bit more do
00:33:59 the thing that scares you yeah so speaking of which startups I think there's a specific some more general
00:34:06 questions that a lot of people would be interested in you've started Stack Overflow you started this course
00:34:15 so what's the here's one two three guys whatever it is in the beginning what was that process like do you start talking
00:34:21 about it do you start programming do you start like where is the birth and the catalyst that actually I can talk about
00:34:27 in the context of Oh Stack Overflow and discourse so I think the key thing initially is there is a problem
00:34:32 something the some state of the world that's unsatisfactory to the point that like you're upset about it right like in
00:34:37 that case it was experts exchange I mean Joel's original idea because I approached I was like look joy I have
00:34:42 all this energy by my blog I want to do something I want to build something but I don't know what it is because I'm not
00:34:45 I'm honestly not a good idea person I'm really not I'm like the execution guy I'm really good at execution but I'm not
00:34:51 good at like blue skying ideas not my forte which is another reason why I like the community feedback because they blue
00:34:56 sky all day long for you right so when I can just go in and cherry-pick a blue sky idea from community even if I have
00:35:01 to spend three hours reading to get one good idea it's worth it man but anyway so the idea from Joel was hey experts exchange
00:35:08 it's got great data but the spirits is hideous right it's it's trying to trick you it feels like used-car salesmen it's
00:35:12 just bad so I was like oh that's awesome it feeds in a community it feeds into like you know we can make a Creative
00:35:17 Commons so I think the core is to have a really good idea that you feel very strongly about in the beginning that
00:35:22 like there's a wrong in the world that we will an injustice that we will right through the process of building this
00:35:27 thing for discourse it was like look there's no good software for communities to just hang out
00:35:33 and like do stuff right like whether it's problem-solving start up whatever forums are such a great building block
00:35:38 or online community and they're hideous they were so bad right it was embarrassing like I literally was
00:35:43 embarrassed to be associated with this software right I was we have to have software they could be proud of
00:35:46 it's like this is competitive with Reddit this is competitive Twitter this is competitor with Facebook right I
00:35:51 would be proud to have the software on my site so that was the genesis of discourse was feeling very strongly
00:36:00 about there needs to be a good solution for communities so that's step one Genesis why do you feel super strongly
00:36:05 about right and then people galvanize around the idea like Joel was already super excited with the idea I was
00:36:10 excited about the idea so with the forum software I was posting on Twitter I had research as part of my research I start
00:36:16 researching the problem right and I found a game called forum Wars which was a parody of forum it's still very very
00:36:23 funny of like foreign behavior circle like I would say 2003 and it's aged some right like the behavior is a little
00:36:30 different in there of Twitter but it was awesome it was very funny and it was like a game as like an RPG and it had a
00:36:35 forum attached to it so it was like a game about forums with a forum attached I was like this is awesome right this is
00:36:40 so cool and the founder of that company or that project it wasn't really a company contacted me this guy Robin Ward
00:36:46 from Toronto's hey you know I saw you been talking about forums and like I really love that problem space he's like
00:36:50 I'd still love to build really good forum software cuz I don't think anything out there is any good and I was
00:36:54 like awesome at that point I was like we're starting a company because like I couldn't have wished for a better person
00:37:00 to walk through the door and say I'm excited about this - same thing with Joe right I mean Joel is a legend in the
00:37:04 industry right so when he walks through so I'm excited about as problems like me - man we can do this right so that to me
00:37:10 is the most important step it's like having ID you're super excited about and another person a co-founder right
00:37:15 because again you get that dual leadership right of like am I making a bad decision sometimes it's nice to have
00:37:22 checks of like is this a good idea I don't know right so those are the the crucial seeds but then starting to build
00:37:28 stuff whether it's you programmer there's video types so there's tons of research there's tons of research like
00:37:32 what what's out there that failed because a lot of people looked at successes I look at how successful X's
00:37:37 everybody looks at the successes those are boring show me the failures because that is what's interesting that's where
00:37:42 people were experimenting that's where people were pushing but and they failed but they probably failed
00:37:47 for reasons that weren't directly about the quality of their idea right yeah so look at all the failures don't just look
00:37:53 what everybody looks at which is a go gosh look at all these successful people look at the failures look at the things
00:37:58 that didn't work research the entire field and so that's the research that I was doing that led me to Robin Wright
00:38:04 was that and then when we for example we did Stack Overflow we're like okay well I really like
00:38:10 elements of voting and Digg and reddit I like the the Wikipedia everything is up to date nothing is like an old tombstone
00:38:15 that like has horrible out-of-date information we know that works Wikipedia is an amazing resource blogging the idea
00:38:22 of ownership is so powerful right like oh I i jo wrote this and look how good Joe's answer is right like all these
00:38:28 concepts were rolling out researching all the things are out there that we're working and why they were working and
00:38:32 trying to like fold them into that again that Frankenstein's monster of what Stack Overflow is and by the way that
00:38:37 wasn't a free decision because there's still a ton of tension in the Stack Overflow system there's reasons people
00:38:42 complain about Stack Overflow because it's so strict right why is it so strict why you guys always closing my questions
00:38:47 it's because there's so much tension that we built into the system around like trying to get good good results out
00:38:55 of the system and you know it it's not a free that stuff doesn't come for free right it's not like we we're all have
00:39:00 perfect answers and nobody will have to get their feelings hurt or nobody will have to get down voted like that it
00:39:06 doesn't work that way right like so this is an interesting point a small tangent yeah you're right about anxiety so I've
00:39:15 posted a lot of questions and answers on Stack Overflow and the questions I usually go to something very specific to
00:39:21 something I am working on this is something you talk about that really the goal of Stack Overflow isn't about is to
00:39:28 write a question not that's not about you it's about the question that will help the community in the future right
00:39:37 but that's a tough sell right because people are like well you know I don't really care about the committee what I
00:39:42 care about is my problem my problem and then that's fair right is it sort of that again that tension that balancing
00:39:47 active we want to help you but we also hope that everybody comes behind you right the long line of people are gonna
00:39:50 come up say oh I kind of have that problem too right and if nobody's ever going to come up and say I have this
00:39:56 problem too then that question shouldn't exist on Stack Overflow because the question is too specific and that even
00:40:00 that's tension right how do you judge the how do you know that nobody's ever gonna have this particular question
00:40:06 again so there's a lot of tension in the system do you think that anxiety of asking the question the anxiety of
00:40:13 answering that tension is inherent to programmers is inherent to this kind of process or can it be improved can be happy land
00:40:25 where the that tension is not quite so harsh  I don't think Stack Overflow can totally change though it works one
00:40:32 thing they are working on finally is the ask page had not changed since 2011 I'm still kind of bitter about this because
00:40:38 I feel like you have a QA system and what are the core pages in a KA system well first of all the question all the
00:40:43 answers and all the also the ask page particularly when you're a new user or someone trying to ask question that's
00:40:47 the point on what you need the most help and we just didn't adapt with the times but the good news is they're working on
00:40:53 this from what I understand and it's gonna be a more wizard based format and you could envision a world where as part
00:40:58 of this wizard based program when you're asking questions okay come up with a good title what are good words up in the
00:41:03 title one word that's not good to put in the title is problem for example I have a problem oh you have a problem okay a
00:41:10 problem that's great right like you need specifics right like so it's trying to help you make a good question title for
00:41:16 example that step will be broken out all that stuff but one of those steps in that wizard of asking could say hey I'm
00:41:21 a little nervous you know I've never done this before can you put me in a queue for like special mentoring right
00:41:27 you could opt into a special mentor I think that would be fantastic like I don't have any objection to that at all
00:41:32 in terms of be an opt-in system because there are people there like no I just want to help them I want to help a
00:41:37 person no matter what I want to go above and beyond I want to spend like hours with this person  Ben's what their
00:41:43 goals are right a great idea Who am I to judge right so that's fine it's not precluded from happening but there's a
00:41:49 certain big-city ethos that we started with like look we're of New York City you don't come to New York City and
00:41:53 expect them to be Oh welcome to the city Joe how's it going come on in let me show you around
00:41:58 that's not how New York City works right I mean and you know again New York City is a reputation for being rude which I
00:42:04 actually don't think it is having been there fairly recently it's not rude people are just like going about their
00:42:08 business right now look look I have things to do I'm busy I'm a busy professional as are you
00:42:12 and since you're a busy professional certainly when you ask a question you're gonna ask the best possible question
00:42:17 right because you're a busy professional and you would not accept anything less than a very well waiting question with a
00:42:23 lot of detail about why you're doing it what you're doing what you researched what you found right because you're a
00:42:29 professional like me right and this rubs people sometimes the wrong way and I don't think it's wrong to say look I
00:42:35 don't want that experience I want just a more chill place for beginners and I still think sacrifice is not was never
00:42:42 designed for beginners right there's this misconception that you know even Joel says some - oh yes deck overflow
00:42:46 for beginners and I think if you're a prodigy it can be all right but that's not not really representative right like
00:42:53 I think as a beginner you want a totally different set of tools you want like live screen sharing live chat you want
00:42:59 access to resources you want a playground like a playground you can experiment in and like test and all this
00:43:05 stuff that we just don't give people because that was never really the the audience that we were designing the
00:43:09 second true flow for that doesn't mean it's wrong and I think it would be awesome if there was a site like that on
00:43:14 the internet or if stack overlies and hey you know we're gonna start doing this that's fine too you know I'm not
00:43:18 there I'm not making those decisions but I do think the pressure the tension that you describe is there for people to be
00:43:24 look I'm a little nervous cuz I know I gotta do my best work right the other one is something you talk about which is
00:43:30 also really interesting to me is duplicate questions or do it's a it's a really difficult problem that you
00:43:39 highlight super far is super hard like you could take one little topic and you could probably write 10 20 30 ways of
00:43:47 asking about that topic and there will be all different I don't know if there should be one page that answers all of
00:43:54 it is there a way that Stack Overflow can help disambiguate like separate these duplicate questions or connect
00:44:03 them together or is it a totally hopeless difficult impossible task I think it's a very very hard computer
00:44:09 science problem and partly because people are very good at using completely different words it always amazed me on
00:44:13 Stack Overflow you'd have two questions that were functionally identical and one question had like zero words in common
00:44:18 with the other question like oh my god from a computer science perspective how do you even begin to solve that and it
00:44:24 happens all the time people are super-good at this right accidentally at asking the same thing in in like in 10
00:44:31 20 different ways and the other complexity is we want some of those duplicates to exist because if there's
00:44:36 five versions with different words have those five versions point to the one centralized answer right it's like okay
00:44:41 this is duplicate nope no worries this here's here's the answer that you wanted over here on this this this you know the
00:44:47 prime example that we want to have rather having ten copies of the question and the answer because if you have 10
00:44:52 copies of the question the answer this also devalues the reputation system which programmers hate as I previously
00:44:58 mentioned you're getting reputation for an answer that somebody else or engaged it's like well it's an answer but
00:45:02 somebody are sorry gave that answer so why are you getting reputation for the same answer as the other guy who gave it
00:45:07 4 years ago people get offended by that right so the reputation system itself adds tension to the system in that the
00:45:13 people who have a lot of reputation become very incentivized to enforce the reputation system and for the most part
00:45:19 that's good I know it sounds weird but for most parts like look strict systems I think to use Tec powerful you have to
00:45:25 have the idea that ok strict systems ultimately work better and I do think in programming you're familiar with loose
00:45:31 typing versus strict typing right the idea that you can declare a variable not declare a variable rather you start
00:45:35 using a variable and ok I see it's implicitly an integer BAM awesome duck equals 5 well duck is now an in
00:45:41 under 5 right and you're like cool awesome simpler right why would I want to worry about typing and for a long
00:45:45 time like in the Ruby community they're like yeah this is awesome like you just do a bunch of unit testing which is
00:45:50 testing your programs validity after the fact to catch any bugs that that strict typing of variables would have caught
00:45:56 and now you have this thing called typescript from Microsoft from the guy who built c-sharp Manders who's one of
00:46:02 the greatest minds in software development right like in terms of language design and says no no no we
00:46:06 want to bolt on a strict type system to JavaScript because it makes things better and now everybody's like oh my
00:46:11 god we we deployed typescript and found 50 latent bugs that we didn't know about right like this is super common so I
00:46:19 think there is a truth in programming that strictness it's not the goal we're not saying be super strict cuz
00:46:26 strictness is correct no it's no no strictness produces better results that's what I'm saying right so strict
00:46:32 typing of variables I would say you almost universally have consensus now is basically correct should be that way in
00:46:38 every language right duck equals 5 should during an error because you know you didn't clear you didn't tell me the duck
00:46:43 was an integer right that's a bug right or maybe you missed time you typed deck right instead of duck right you never
00:46:48 know this happens all the time right so with that in mind I will say that the strictness the system is correct now
00:46:53 that doesn't mean cruel that doesn't mean mean that doesn't mean angry it just means tricked okay so I
00:46:59 think where there's misunderstanding is and people get cranky right like another question you asked is like why are
00:47:05 programmers kind of mean sometimes well who'da programmers work with all day long so I have a theory that if you're
00:47:11 at a job and you work with all day long what do you eventually become an
00:47:16 an and what is the computer except the world's biggest because the computer has no time for
00:47:23 your the computer the minute you make a mistake everything else crashing down right one semicolon has
00:47:28 crashed space missions right so that's normal so you begin to internalize that you begin to think oh my coworker the
00:47:36 computer is super strict and kind of a jerk about everything so that's kind of how I'm gonna be because I work with
00:47:42 this computer and I have to accede to its terms on everything so therefore you start to absorb that and you start to
00:47:48 think oh well being really strict arbitrarily is really good an error of error code five six two four nine is a
00:47:54 completely good error message because that's what the computer gave me right so you kind of forget to be a person at
00:48:00 some level and you know they say great detectives internalized criminals and kind of are criminals themselves like
00:48:06 this trope of the master detective is good because you can think like the criminal well I do think that's true of
00:48:11 programmers really good programmers think like the computer because that's their job but if you internalize it too
00:48:17 much you become the computer you become a kind of become a jerk to everybody because that's what you've internalized
00:48:23 you're almost not a jerk but you have no patience for a lack of strictness as you said it's not out of a sense of meanness
00:48:29 it's accidental but I do believe it's an occupational hazard of being a programmer is you start to behave like
00:48:34 the computer you're very unforgiving you're very terse you're very Oh wrong and correct move on it's like well can
00:48:41 you help me like what could I do to fix now wrong say next question right like that's normal for the computer right
00:48:49 just fail next right like out of you remember in Saturday Night Live like in the nine
00:48:53 they had this character was an IT guy yeah the move guy move was that Jimmy Fallon no no can't play dumb okay yeah I
00:49:03 remember move right he had no patience for he might have been MADtv actually might have been might a bit but anyway
00:49:10 that was the that's always been the perception right you start to behave like the computer it's like oh you're
00:49:15 wrong out of the way you know you've written so many blog posts about programming about programs programming
00:49:24 programmers what do you think makes a good let's start with what makes a good solo programmer well I don't think you
00:49:32 should be a solo programmer I think to be a good solo programmer it's kind of like what I talked about well not on mic
00:49:38 but one of the things john carmack one of the best points he makes in the book masters of doom which is a fantastic
00:49:43 book anybody listening this who hasn't read it please read it's such a great book is that at the time they were
00:49:49 working on stuff like Wolfenstein and doom like they didn't have the resources that we have today they didn't have
00:49:54 Stack Overflow they didn't have Wikipedia they didn't have like discourse forums they didn't have places
00:50:00 to go to get people to help them write they had to work on their own and that's why it took a genius like Carmack to do
00:50:05 this stuff because you had to be a genius to invent from first principles a lot of the stuff he was he was like the
00:50:10 hacks he was coming up with were genius right genius level stuff but you don't need to be a genius anymore and that
00:50:15 means not working by yourself you have to be good at researching stuff online you have to be good at asking questions
00:50:20 really good questions that are really well researched which implies oh I went out and researched for three hours
00:50:24 before I wrote those questions like that's what you should be doing because that's what's gonna make you good write
00:50:29 to me this is the big difference between programming in like the 80s versus programming today is like you you kind
00:50:34 of had to be by yourself back then like where would you go for answers I remember in the early days when I was a
00:50:41 learning Visual Basic for Windows like I would call the Microsoft helpline on the phone when I had like program because I
00:50:47 was like I don't know what to do so I would like go and call and they have these huge phone banks and like can you
00:50:51 imagine how alien that is now like who would do that right like that's crazy so there was just nowhere else to go
00:50:58 when you got stuck right like I had the books that came with it I read those study those religiously I I just saw a
00:51:03 post from Steve Sinofsky that said this C++ version seven came with like 10,000 pages of written
00:51:12 material because where else were you gonna figure that stuff out go to the library I mean you don't have what
00:51:17 capito you didn't have you know read it you know were to go to answer these questions so you you've talked about
00:51:25 through the years basically not having an ego and not thinking that you're the best programmer in the world it's always
00:51:34 kind of just looking to improve to become a better programmer than you were yesterday so how have you changed as a
00:51:41 programmer and as a as a thinker designer around programming over it'll past what is it 15 years really of being
00:51:49 a public figure I would say the big insight that I had is eventually as a programmer you have to kind of stop
00:51:54 writing code to be effective which is kind of disturbing because you really love it and but you realize like being
00:52:02 effective at program at programming in the general sense doesn't mean writing code and a lot times you can be much
00:52:08 more successful by not writing code and writing code in terms of just solving the problems you have essentially hiring
00:52:12 people that are really good and like setting them free and like giving them basic direction right like on strategy
00:52:18 and stuff because a lot of the problems you encounter aren't necessarily solved through like really gnarly code they're
00:52:25 solved by conceptual solutions which can then be turned into code but are you even solving the right problem I mean so
00:52:32 I would say for me the main insight I have is to succeed as a programmer you eventually kind of stop writing code
00:52:39 that's gonna sound discouraging probably to people hearing but I don't mean it that way what I mean is that you're
00:52:42 coding at a higher level language eventually like okay so we're coding an assembly language right that's the
00:52:47 beginning right you're hard coded to the architecture then you have stuff like see we're cool we can abstract across
00:52:52 the architecture you can write code I can then compile that code for arm or you know you know whatever you know x86
00:52:58 or whatever else is out there and then even higher level net right like you're looking like Python Ruby interpreted
00:53:04 languages and then to me as a programmer like okay I want to go even higher I want to go higher than that how do I
00:53:08 abstract higher than the language it's like well you abstract in spoken language and written language right like
00:53:14 you're sort of inspiring people to get things done giving them guidance like what if we did this what if we did this
00:53:18 you're writing in the highest level language that there is which is for me English right whatever
00:53:24 your spoken language is so it's all about being effective right and I think a patrick mckenzie Patio 11 on Hacker
00:53:32 News and works at stripe has a great post about this of how calling yourself a programmer is a career limiting move
00:53:39 at some level once you get far enough from your crin I really believe that and again I apologize this is sound
00:53:44 discouraging I don't mean it to be but he's so right because all the stuff that goes on around the code like the people
00:53:49 mm-hmm like that's another thing if you look at my early blogging piece is about Wow programming is about people more than
00:53:55 it's about code which doesn't really make sense right but it's about can these people even get along together can
00:54:01 they understand each other can you even explain to me what it is you're working on are you solving the right problem
00:54:06 people weren't right another classic programming book which again up there with code complete please read people
00:54:11 where it's that software is people right people are the software first and foremost so a lot of the skills that I
00:54:16 was working on early on the blog were about figuring out the people parts of programming which were the harder parts
00:54:21 the hard part of programming once you get to a certain skill of in programming you can pretty much solve any reasonable
00:54:25 problem that's put in front of you you're not writing algorithms from scratch right that just doesn't happen
00:54:31 so any sort of reasonable problem for in front of you're gonna be able to solve but what you can't solve is our manager
00:54:37 is a total jerk you cannot solve that with code that is not a codes problem and yet that will you way more
00:54:44 than oh we had to use this stupid framework I don't like or or you know Sam keeps writing bad code that I hate
00:54:51 or you know you know Dave is off there in the wilderness writing god knows what right these are not your problems your
00:54:56 problems your manager or a co-worker is so toxic to everybody else in your team that like nobody can get anything done
00:55:01 because everybody's so stressed out and freaked out right these are the problems that you have to attack absolutely and
00:55:06 so as you go to these higher level abstractions as you developed as a programmer to higher higher level
00:55:11 abstractions go into natural language you're also the guy who kind of preached you know building it you know diving in
00:55:20 and doing it and and and like learn by doing yes do you do you worry that as you get to higher higher level abstractions
00:55:31 you lose track of the lower level of just building is like do you worry about that you know
00:55:39 even not maybe now but 10 years from now 20 years from now well no I mean there is always that paranoia and oh gosh I
00:55:45 don't feel as valuable since I'm not writing code but for me like when we started the discourse project it was
00:55:49 Ruby which I didn't really know Ruby I mean as you pointed out and this is another valuable have straight from
00:55:54 Stack Overflow you can be super proficient for example C sharp which I was working in that's what we built
00:55:58 Stack Overflow and and still is written in and then switch to Ruby and you're a newbie again right like I'm but but you
00:56:03 have the framework I know what a for loop is I know what recursion is I know you know what would attract a stack
00:56:10 traces right like I have all the fundamental concepts to be a programmer I just don't know Ruby so I'm still on a
00:56:15 higher level I'm not like a beginner beginner like you're saying I'm just like I need to apply my programming
00:56:20 concepts I already know to Ruby what so there's a question that's really interesting so looking at Ruby how do
00:56:27 you go about learning enough that your intuition can be applied well that carryover that's all trying to get to is
00:56:31 like what I realized written when I started was just me and Robin I realized if I bother Robin I am now costing us
00:56:37 productivity right every time I go to Robin rather than building the the are our first alpha version of this course
00:56:45 he's now answering my stupid questions about Ruby is that a good use of his time is that a good use of my time
00:56:50 the answer to both of those was resoundingly no right like we were getting to an alpha and it was a pretty
00:56:56 much disk ok we'll hire more programmers right like we eventually hired Neil and then eventually Sam who came in as a
00:57:04 co-founder actually was Sam first then Neil later but the answer of the problem is just hire other competent programmers
00:57:09 it's not like teach now I shalt pull myself up by my bootstraps and Ruby but at some point writing code becomes a
00:57:16 liability to you in terms of getting things done there's so many other things that go on in the project like building
00:57:21 the prototype like you mentioned like well how do you if you're not writing code has every keep focus on like what
00:57:27 what are we building well first basic mock-ups and research right like what what do we even want to build there's a
00:57:31 little bit of that that goes on then very quickly get to the prototype stage like build a prototype
00:57:35 let's iterate on the prototype really really rapidly that's what we do at this course and that's what we we demoed to
00:57:39 get our seed funding for this course was the the alpha version of discourse that we had running and ready to go and it
00:57:45 was very it was bad I mean it was I'll just tell you it was bad I have we have screenshots and I'm
00:57:49 just like embarrassed to look at it now but it was the prototype we were figuring out like what's working what's
00:57:54 not working because there's such a broad gap Bateen between the way you think things will work in your mind or even on
00:58:01 paper and the way they work once you sit and live in the software like actually spend time living and breathing us out
00:58:06 we're so different so my philosophy is get to a prototype and then what you're really optimizing
00:58:13 for speed of iteration like how you can turn the crank how quickly can we iterate that's the absolutely critical
00:58:19 metric of any software project and I had a tweet recently that people liked and I totally this is so fundamental to what I
00:58:25 do is like if you want to measure the core competency of any software tech company it's the speed at which somebody
00:58:30 can say hey we really need this word in the product change this word right because it will be more clear to the
00:58:35 users like what like instead of respond it's a reply or something but there's some from the conception of that idea to
00:58:41 how quickly that single word can be changing your software rolled out to users that is your lifecycle that's your
00:58:47 health your your heartbeat if your heartbeat is like super slow you're basically dead no seriously like if it
00:58:55 takes two weeks or even a month to get that single word change that was oh my god this great idea that word is so much
00:59:00 clearer I'm talking like a super like everybody's on board for this change it's not like let's just change at work
00:59:03 cuz we're bored it's like this is an awesome change and then it takes a you know months to roll out it's like what
00:59:09 you're dead like you can't iterate you can't do anything right like so anyway about the heartbeat it's like get the
00:59:15 the prototype and then iterate on it that's that's what I view is like the central tenets of some modern software
00:59:21 development that's fascinating you put it that way it's actually so I work in I build a Thomas vehicles and when you
00:59:28 look at what maybe compare Tesla to most other automakers the the psych the whatever the heartbeat for Tesla is
00:59:36 literally days now in terms of they can over-the-air deploy software updates to all their vehicles which is markedly
00:59:44 different than every other automaker which takes years to update a piece of software and so and that's reflected in
00:59:54 everything that's the the final product that's reflected and really how slowly they adapt to the times
00:59:59 clear I'm not saying being a hummingbird is the goal either it's like you don't a heartbeat it's like so fast it's like
01:00:03 you're your wing you know you're just freaking out but like it is a measure of health you should have a healthy
01:00:07 heartbeat it's up to four people listening this decide what that means but it has to be healthy has to be
01:00:12 reasonable because otherwise you just get me frustrated because like that's how you build software you make mistakes
01:00:17 you roll it out you live with it you see what it feels like and say oh god that was a terrible idea oh my gosh
01:00:22 this could be even better if we did why right you turn the crank and then the more you do that the faster you get
01:00:27 ahead of your competitors ultimately because you're it's rate of change right delta-v right how fast are you moving
01:00:34 well within a year you're gonna be miles away by the time they catch up with you right like that's the way it works and plus
01:00:40 users like I as a software developer I love software that's constantly changing because I don't understand people get
01:00:46 super pissed off when like oh they changed the software on me how dare they I'm like yes change the software change
01:00:51 it all the time man that is that's what makes this stuff great is that it can be changed so rapidly and become something
01:00:58 that that is greater than it is now now credit there's some changes that suck I admit I've seen it many times but in
01:01:04 general it's like that's what makes software cool right is that it is so malleable like fighting that is like
01:01:08 weird to me because it's like well you're fighting the essence of the thing that you're building like that doesn't
01:01:13 make sense you want to really embrace that not not to be a hummingbird but like embrace it to a healthy cycle of
01:01:18 your heartbeat right so you talk about that people really don't change it's true that's why probably a lot of the stuff
01:01:26 you write about in your blog probably will remain true there's a flip side of the coin people don't change so
01:01:32 investing and understanding people is is like learning Unix in 1970 because and nothing has changed right like yeah all
01:01:38 those things you've learned about people will still be valid 30 40 years from now whereas if you learn the latest
01:01:43 JavaScript framework that's gonna be good for like two years right yeah exactly so but if you look at
01:01:50 the future of programming so there's a people component but there's also the technology itself do you what do you see
01:01:57 as the future of programming will it change significantly or as as far as you can tell people are ultimately
01:02:06 programming and so it will not it's not something that you foresee changing and you fund the month away well you gotta
01:02:11 go look on sort of the basics of programming and one things that always shocked me is
01:02:16 like source control like I didn't learn anything about source control I graduate from college in 1992 but I remember
01:02:25 hearing from people like in ladies like 1998-99 like even maybe today they're not learning source control and to me
01:02:30 it's like well how can you not learn source control that is so fundamental to working with other programmers working
01:02:36 in a way they don't lose your work like just just basics off the bed literal bedrock software development is source
01:02:42 control now you compare today like github right like Microsoft brought github which I think was incredibly
01:02:47 smart acquisition move on their part now they have anybody who wants like reasonable source control to go sign
01:02:51 them and github it's all set up for you right there's tons of walkthroughs tons of tutorials so from the concept of like
01:02:58 has programming advanced from say 1999 it's like well hell we have github I mean my god yes right like it's it's
01:03:04 massively advanced over over what it was now as to whether program is is significantly different I'm gonna say no
01:03:11 but I think the baseline of like what we view is like fundamentals will continue to go up and actually get better like
01:03:18 source control that's one of them in fundamentals that has gotten I mean hundreds of orders of magnitude better
01:03:24 than it was 10 20 years ago so those are the fundamentals let me introduce two things that maybe you can comment on so
01:03:31 one is mobile phones so that could fundamentally transform what what programming is or maybe not maybe you
01:03:39 can comment on that and the other one is artificial intelligence which promises to in some ways to do some of the
01:03:48 programming for you is one way to think about it so it's really what a programmer is is using the intelligence
01:03:57 that's inside your skull to do something useful the hope with artificial intelligence is that it does some of the
01:04:02 useful parts for you you don't have to think about it so do you see smart phones the fact that everybody has one
01:04:08 and they're getting more and more powerful as potentially changing programming and do you see AI is
01:04:14 potentially changing problem okay so that's good so smart phones have definitely changed I mean since you know
01:04:19 I guess 2010 that's when they really started getting super popular I mean in the last eight years the world has
01:04:25 literally changed like everybody carries a computer around and that's normal I mean that is such a
01:04:31 huge change in society I think we're still dealing with a lot of the positive negative ramifications of that right
01:04:36 like everybody's connected all the time everybody's on the computer all the time that was my dream world as a geek right
01:04:41 but it's like be careful what you ask for right like wow no everybody's a computer it's not quite the utopia that
01:04:47 we thought it would be right computers can be used for a lot of stuff that's not necessarily great so to me that's
01:04:53 the central focus of the smartphone is just that it puts a computer in front of everyone granted a small touchscreen smallish
01:04:59 touchscreen computer but as for programming like I don't know I don't think that I've kind of over time come
01:05:05 to subscribe to the UNIX view of the world when it comes to programming it's like you want to teach these basic
01:05:10 command line things and that is just what programmers gonna be for I think a long long time I don't think there's any
01:05:17 magical like visual programming that's gonna happen I just I don't know I've over time I've become a believer in that
01:05:24 UNIX philosophy it was just you know they kind of had it right with UNIX that's gonna be the way it hits for a
01:05:29 long long time and well we'll continue to like I said raise the baseline the tools will get better it'll get simpler
01:05:33 but it's still fun mental gonna be command-line tools you know makes fancy IDs that's kind of it for the
01:05:39 foreseeable future I'm not seeing any visual programming stuff on the horizon because you can I think like what do you
01:05:44 do on a smartphone that will be directly analogous to programming like I'm trying to think right like and there's really
01:05:54 not much so not necessarily analogous to programming but the kind of things that the kind of programs you would need to
01:06:06 write might need to be very different yeah and the kind of language is I mean but I probably also subscribed to the
01:06:13 same just because everything in this world might be written in JavaScript oh yeah that's different that's already
01:06:18 happening I mean this course is a bit on discourses itself javascript is another bet on that side of the table and I
01:06:23 still strongly believe in that so I would say smartphones have mostly a cultural shift more than a programming
01:06:28 shift now your other question was about artificial intelligence and like sort of devices predicting what you're gonna do
01:06:34 and I do think there's some strengths to that I think artificial intelligence kind of overselling it in terms of what
01:06:38 it's doing it's more like people are predictable right people do the same things like let me
01:06:43 give you an example one one cheque we put in a discourse that's in a lot of big commercial websites is say you log
01:06:51 in from New York City now and then an hour later you log in from San Francisco like well that's interesting how did
01:06:58 you get from New York to San Francisco in one hour so at that point you're like okay this is a suspicious login at that
01:07:03 point so we would alert you it's like okay but that's an AI right that's just a heuristic of like how did you in one
01:07:11 hour get 2,000 miles right that doesn't when you grab maybe you're on a VPN there's other races happen but that's
01:07:15 just a basic prediction based on the idea that people pretty much don't move around that much like they may travel
01:07:21 occasionally but like nobody I mean unless you're a traveling salesman that's literally we're traveling the
01:07:26 world every day like there's so much repetition and predictability in terms of things you're going to do and I think
01:07:32 good software anticipate your needs like for example Google I think it's called Google now or whatever that Google thing
01:07:36 is that predicts your commute and predicts them based on your phone location like where are you every day
01:07:41 well that's probably where you work that kind of stuff I do think computers can get a lot better at that but I hesitate
01:07:46 to call it like full-blown AI it's just computers getting better at like first of all they have a ton of because every
01:07:51 has a smartphone now I'm suddenly how all this data that we didn't have before about location about like you know
01:07:57 communication and feeding that into some some basic heuristics and maybe some fancy algorithms that turn it into
01:08:03 predictions of anticipating your needs like like a friend would write like oh hey I I see your home would you like
01:08:08 some dinner right like let's go get some food because that's usually what we do this time of day right and the context
01:08:13 of actually the act of programming DCI des improving and making the life of programming is better I do think that is
01:08:19 possible cuz things a lot of repetition in programming right oh you know Clippy would be the bad example of oh I see it
01:08:25 looks like you're writing a for loop but there are patterns in code right like in and actually libraries are kind
01:08:32 of like that right like rather than go you know code up your own HTTP request library it's like what you'd use one of
01:08:38 the existing ones that we have that's already troubleshot right it's not a I per se it's just you know building
01:08:45 better Lego bricks bigger Lego bricks that have more functionality in them so people don't have to worry about the
01:08:50 low-level stuff as much anymore like WordPress for example to me is like a tool for someone who is in a
01:08:56 programmer to do something I mean you can turn WordPress into anything it's kind of crazy actually through perla
01:09:00 plugins right and that's not programming per se it's just Lego bricks stacking WordPress elements right a little bit of
01:09:07 configuration glue so I would say maybe in a broader sense what I'm seeing like they'll be more gluing and less like
01:09:14 actual programming and that's a good thing right because most of the stuff you need is kind of out there already
01:09:21 you said 1970 is Unix do you see PHP and these kind of old remnants of the early birth of programming remaining with us
01:09:34 for a long time like you said Unix in itself do you see ultimately you know this stuff just being there out of momentum I
01:09:45 kind of do I mean I was a big believer in Windows early on and I was a big you know I was like a UNIX what a waste of
01:09:49 time but over time I've completely flipped on that where I was like okay the UNIX guys were right and pretty much
01:09:53 Microsoft and windows were kind of wrong at least on the server side not on the desktop right you need a GUI you know
01:09:59 what stuff and yeah the two philosophies like Apple built on UNIX effectively Darwin and on the desktop is a slightly
01:10:05 restore even on the server side where you're going to be programming now it's question where the program is gonna be
01:10:09 there's gonna be a lot more like client-side programming because technically discourse is client-side
01:10:14 programming the way you get discourse we deliver a big ball of JavaScript which is then execute locally so we're really
01:10:20 using a lot more local computing power will still retrieve the data obviously we have to display the posts on the
01:10:24 screen and so forth but in terms of like sorting and a lot of the basic stuff we're using the host processor but to
01:10:31 the extent that a lot of programming is still gonna be server-side I would say yeah the UNIX philosophy definitely one
01:10:37 and they'll be different veneers over the UNIX but it's still if you if you peel away one or two layers it's gonna
01:10:43 be UNIX safe for a long I think UNIX one I mean so definitively it's interesting to hear you say that because you've done
01:10:49 so much excellent work on the Microsoft and aside in terms of back-end development cool so what's the future
01:10:58 hold for Jeff Atwood amid the discourse continuing the discourse in trying to improve conversation on the web
01:11:05 this force is whatever be it is a and originally I call it a five-year project then really quickly revised that to a
01:11:10 ten-year project so where we started in early to that 2013 that's we launched the first version so we're still you
01:11:16 know five years in this is the part where it starts getting good like we have a good product out this course
01:11:21 there's any any project building software it takes three years to build what you wanted to build anyway like v1
01:11:26 is gonna be terrible which it was but you ship it anyway cuz that's how you get better at stuff it's about turning
01:11:30 the crank it's not about v1 being perfect because that's ridiculous it's about v1 then let's get really good at V
01:11:37 1.1 1.2 1.3 like how fast can we iterate and I think we're iterating like crazy on discourse the point that like it's a
01:11:42 really good product now we have serious momentum and my original vision was I want to be the wordpress of discussion
01:11:49 meaning someone came to you and said I want to start a blog although the very question is kind of archaic now it's
01:11:56 like who actually blogs anymore but I wanted the answer to that to be it would be what did WordPress normally because
01:12:02 that's the obvious choice for blogging most the time but if someone said hey I want to I need a group of people to get
01:12:09 together and do something the answer should be discourse right that should be the default answer for people cuz it's
01:12:13 open source it's free doesn't cost you anything you control you can run it your minimum server across four discourses
01:12:19 five bucks a month at this point they actually got the VPS prices down it used to be ten dollars a month for one
01:12:25 gigabyte of RAM which we where our dependent we have a kind of heavy stack like there's a lot of stuff in discourse
01:12:31 you need post grass you need Redis you need Ruby on Rails you need a sidekick for scheduling it's not a trivial amount
01:12:37 of stuff because we were architected for like look we're building for the next ten years I don't care about shared PHP
01:12:44 hosting that's that's not my model my idea is like hey you know eventually this is gonna be very cheap for
01:12:48 everybody and I want to build it right using again you know hire bigger building block levels right that have
01:12:55 more requires and there's a wordpress model of wordpress.org juarez calm is their central hosting for this course or
01:13:02 no there is we're not strictly segmenting into the open source versus the commercial side we have a hosting
01:13:06 business that's how this course makes money is we host discourse instances and we have really close relationship with
01:13:13 our customers of the symbiosis of them giving us feedback on the product we definitely wait feedback from customers
01:13:17 a lot heavier than feedback from somebody who just wanders by and gives feedback but that's where we make
01:13:23 all our money but we don't have a strict division we encourage people to use this course like the whole point is that it's
01:13:29 free right you're anybody can set it up I don't want to be the only person that hosts discourse that's absolutely not
01:13:35 the goal but it is a primary way for us to build a business and it's actually kind of a great business I mean the
01:13:40 business is going really really well in terms of hosting so I I used to work at Google research is a company that's
01:13:47 basically funded on advertisement so it's Facebook let me ask if you can comment on it
01:13:54 I think advertisement is best so you'd be extremely critical on what ads are but at its best it's actually serving
01:14:01 you in a sense as giving you it's connecting you to what you would want to explore so it's like related posts or
01:14:08 related content is the same that's the best of advertisement so this course is connecting people based on their
01:14:17 interests it seems like a place where advertisement at its best could actually serve the users is that something that
01:14:24 you're considering thinking about as a way to bring to financially support the platform that's interesting because I
01:14:32 actually have a contrarian view of advertising which I kind of agree with you I recently installed that blocker
01:14:37 like reluctantly because I don't like to do that but like the performance of the ads man like they're so heavy now and
01:14:43 like it's just crazy so like it's almost like a performance argument more than like I actually am Pro ads and I
01:14:49 contrary I have a contrarian viewpoint I agree with you if you do ads right it's showing you stuff you'll be interested
01:14:54 in anyway like I don't mind that that actually is kind of a good thing so plus I think it's it's rational to
01:15:00 want to support the people that are doing this work through seeing their ads and but that said I run adblock now
01:15:07 which I I didn't want to do but I was convinced by all these artists like 30 40 megabytes of stuff just to serve you
01:15:13 ads yeah it feels like as now or like the experts exchange of whenever you started Stack Overflow it's a little bit
01:15:20 it's all there's so many companies and Antec though it's embarrassing like you can do that if you see those logo charts
01:15:24 of like just a whole page just like you can't even see them they're so small there's so many companies in the space
01:15:29 but since you brought it up I do want to point out that very very few discourse sites run using an ad-supported model it's not
01:15:36 effective like it's too diluted it's too weird it doesn't pay well and like users hate it so it's a combination of like
01:15:43 users hate it it doesn't actually work that well in practice like in theory yes I agree with you but if you clean fast
01:15:48 ads that were exactly the stuff you would be interested awesome we're so far from that though right like Google does
01:15:53 an okay job retargeting and stuff like that but in the in in the real world
01:16:00 discourse sites rarely can make ads work it just doesn't work for so many reasons but you know it does work is
01:16:09 subscriptions patreon affiliate codes for like Amazon of like just oh here here's a cool yo-yo click and then you
01:16:15 click and go to Amazon they get a small percentage of that which is fair I think because you saw the yo-yo on that site
01:16:20 and you click through and you bought it right that's fair for them to get 5% of that or 2% of that or whatever it is
01:16:26 those things definitely work in fact a site that I used to participate on a lot I helped the owner one things I I got
01:16:32 them switched to discourse obviously paid them to switch to discourse because I was like look you guys got a switch I
01:16:36 can't come here anymore all this terrible in software but I was like a look and on top of that like you're
01:16:42 serving people ads that they hate like you should just go full on patreon because he had a little bit of patreon
01:16:48 go full on patreon do the Amazon affiliates thing for any Amazon links to get posted and just do that and just
01:16:54 triple down on that stuff and that's worked really well for them and this creator in particular so that stuff
01:16:59 works but traditional ads I mean definitely not working at least on this course so last question you've created
01:17:07 the code keyboard I've programmed most of my adult life and a Kinesis keyboard I have one upstairs now can you describe
01:17:14 what a mechanical keyboard is and why is it something that makes you happy well you know this is another fetish item
01:17:20 really like it's not required you can do programming on any kind of keyboard right even like an on-screen keyboard oh
01:17:25 god that's terrifying right like well you could but if you look back to the early days computing
01:17:30 there were chiclet keyboards which are I think those are awful right but what's a chick like you were oh god okay well
01:17:36 it's just like thin rubber membranes all the rubber ones oh no super bad right yeah so it's a fetish item all it really
01:17:42 says is look I care really about keyboards because the keyboard is the primary method of communication with computer
01:17:47 right so it's just like having a nice mic for this this podcast you want a nice keyboard right because it has tat
01:17:52 very tactile feel I can tell exactly when I press the key I get that little click so oh and it feels good and it's
01:17:58 also kind of a fetish shot it was like wow I care enough about programming that I care about the tool the primary tool
01:18:03 that I use committing to computer make sure it's as good as it feels good to use for me and like I can be very
01:18:09 productive with it so to be honest it's a little bit of a fetish item but a good one it indicates that you're serious and
01:18:14 in case you're interested it indicates that you care about the fundamentals because you know what makes you a good
01:18:18 programmer being able to type really fast right like this is true right so a core skill is just being able to type
01:18:24 fast enough to get your ideas out of your head into the codebase so just practicing your typing can make you a
01:18:30 better programmer it is also something that makes you well makes you enjoy typing correct the actual act something
01:18:40 about the process I got played piano it's time so there's a tactile feel that ultimately feeds the passion makes you
01:18:48 happy right no totally that's it I mean and it's funny because artisanal keyboards have exploded like mass drop
01:18:53 has gone ballistic with this stuff there's probably like 500 keyboard projects on mass drop alone and there's
01:18:58 some other guy I follow on Twitter I used to write for this the site the tech report way back in the day and he's like
01:19:03 every week he's just posting like what I call keyboard porn of like just cool keyboards like how my god they look
01:19:07 really cool right like that's like how many keyboards this guy yeah it's got me with yo-yos how many rows do
01:19:12 you have how many do you need well technically one but I like a lot I don't know why so same thing with keyboards so
01:19:18 yeah they're awesome like I highly recommend anybody who doesn't have a mechanical to research it
01:19:24 look into it and see what you like and you know it's ultimately a fetish item but I think these sort of items these
01:19:30 religious artifacts that we have are part of what make us human like that that part you important right it's kind
01:19:37 of makes life worth living and yes it's not necessary in the strictest sense but ain't nothing necessary if you think of
01:19:44 yet right like and so yeah why not so sure Jeff thank you so much for talking today yeah you're welcome thanks for having
